"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate100 = void 0;
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const oldModRelPath = path_1.default.join('BloodstainedRotN', 'Content', 'Paks', '~mod');
async function migrate100(api, oldVersion) {
    if (semver_1.default.gte(oldVersion || '0.0.1', '1.0.0')) {
        return Promise.resolve();
    }
    const state = api.store.getState();
    const activatorId = vortex_api_1.selectors.activatorForGame(state, common_1.GAME_ID);
    const activator = vortex_api_1.util.getActivator(activatorId);
    const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
    if ((discovery === undefined)
        || (discovery.path === undefined)
        || (activator === undefined)) {
        (0, vortex_api_1.log)('debug', 'skipping bloodstained migration because no deployment set up for it');
        return Promise.resolve();
    }
    return api.awaitUI()
        .then(() => vortex_api_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, (0, common_1.modsRelPath)())))
        .then(() => api.emitAndAwait('purge-mods-in-path', common_1.GAME_ID, '', path_1.default.join(discovery.path, oldModRelPath)))
        .then(() => {
        api.store.dispatch(vortex_api_1.actions.setDeploymentNecessary(common_1.GAME_ID, true));
    });
}
exports.migrate100 = migrate100;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1pZ3JhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLG9EQUE0QjtBQUM1QiwyQ0FBc0U7QUFFdEUscUNBQWdEO0FBRWhELE1BQU0sYUFBYSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUV4RSxLQUFLLFVBQVUsVUFBVSxDQUFDLEdBQXdCLEVBQUUsVUFBa0I7SUFDM0UsSUFBSSxnQkFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFO1FBQzlDLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzFCO0lBRUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQyxNQUFNLFdBQVcsR0FBRyxzQkFBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxnQkFBTyxDQUFDLENBQUM7SUFDL0QsTUFBTSxTQUFTLEdBQUcsaUJBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFakQsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLENBQUMsZ0JBQU8sQ0FBQyxDQUFDO0lBRW5FLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDO1dBQ3RCLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUM7V0FDOUIsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLEVBQUU7UUFFaEMsSUFBQSxnQkFBRyxFQUFDLE9BQU8sRUFBRSxxRUFBcUUsQ0FBQyxDQUFDO1FBQ3BGLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzFCO0lBS0QsT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFO1NBQ2pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUEsb0JBQVcsR0FBRSxDQUFDLENBQUMsQ0FBQztTQUMvRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFDcEIsZ0JBQU8sRUFDUCxFQUFFLEVBQ0YsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7U0FDdEUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNULEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLG9CQUFPLENBQUMsc0JBQXNCLENBQUMsZ0JBQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQS9CRCxnQ0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCB7IGFjdGlvbnMsIGZzLCBsb2csIHNlbGVjdG9ycywgdHlwZXMsIHV0aWwgfSBmcm9tICd2b3J0ZXgtYXBpJztcblxuaW1wb3J0IHsgR0FNRV9JRCwgbW9kc1JlbFBhdGggfSBmcm9tICcuL2NvbW1vbic7XG5cbmNvbnN0IG9sZE1vZFJlbFBhdGggPSBwYXRoLmpvaW4oJ0Jsb29kc3RhaW5lZFJvdE4nLCAnQ29udGVudCcsICdQYWtzJywgJ35tb2QnKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZ3JhdGUxMDAoYXBpOiB0eXBlcy5JRXh0ZW5zaW9uQXBpLCBvbGRWZXJzaW9uOiBzdHJpbmcpIHtcbiAgaWYgKHNlbXZlci5ndGUob2xkVmVyc2lvbiB8fCAnMC4wLjEnLCAnMS4wLjAnKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0gYXBpLnN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IGFjdGl2YXRvcklkID0gc2VsZWN0b3JzLmFjdGl2YXRvckZvckdhbWUoc3RhdGUsIEdBTUVfSUQpO1xuICBjb25zdCBhY3RpdmF0b3IgPSB1dGlsLmdldEFjdGl2YXRvcihhY3RpdmF0b3JJZCk7XG5cbiAgY29uc3QgZGlzY292ZXJ5ID0gc3RhdGU/LnNldHRpbmdzPy5nYW1lTW9kZT8uZGlzY292ZXJlZD8uW0dBTUVfSURdO1xuXG4gIGlmICgoZGlzY292ZXJ5ID09PSB1bmRlZmluZWQpXG4gICAgICB8fCAoZGlzY292ZXJ5LnBhdGggPT09IHVuZGVmaW5lZClcbiAgICAgIHx8IChhY3RpdmF0b3IgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAvLyBpZiB0aGlzIGdhbWUgaXMgbm90IGRpc2NvdmVyZWQgb3IgZGVwbG95ZWQgdGhlcmUgaXMgbm8gbmVlZCB0byBtaWdyYXRlXG4gICAgbG9nKCdkZWJ1ZycsICdza2lwcGluZyBibG9vZHN0YWluZWQgbWlncmF0aW9uIGJlY2F1c2Ugbm8gZGVwbG95bWVudCBzZXQgdXAgZm9yIGl0Jyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLy8gd291bGQgYmUgZ29vZCB0byBpbmZvcm0gdGhlIHVzZXIgYmVmb3JlaGFuZCBidXQgc2luY2UgdGhpcyBpcyBydW4gaW4gdGhlIG1haW4gcHJvY2Vzc1xuICAvLyBhbmQgd2UgY2FuJ3QgY3VycmVudGx5IHNob3cgYSAod29ya2luZykgZGlhbG9nIGZyb20gdGhlIG1haW4gcHJvY2VzcyBpdCBoYXMgdG8gYmVcbiAgLy8gdGhpcyB3YXkuXG4gIHJldHVybiBhcGkuYXdhaXRVSSgpXG4gICAgLnRoZW4oKCkgPT4gZnMuZW5zdXJlRGlyV3JpdGFibGVBc3luYyhwYXRoLmpvaW4oZGlzY292ZXJ5LnBhdGgsIG1vZHNSZWxQYXRoKCkpKSlcbiAgICAudGhlbigoKSA9PiBhcGkuZW1pdEFuZEF3YWl0KCdwdXJnZS1tb2RzLWluLXBhdGgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR0FNRV9JRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5qb2luKGRpc2NvdmVyeS5wYXRoLCBvbGRNb2RSZWxQYXRoKSkpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgYXBpLnN0b3JlLmRpc3BhdGNoKGFjdGlvbnMuc2V0RGVwbG95bWVudE5lY2Vzc2FyeShHQU1FX0lELCB0cnVlKSk7XG4gICAgfSk7XG59XG4iXX0=