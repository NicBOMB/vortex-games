"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadSMAPI = exports.deploySMAPI = exports.findSMAPIMod = void 0;
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const semver_1 = require("semver");
const constants_1 = require("./constants");
function findSMAPIMod(api) {
    const state = api.getState();
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, common_1.GAME_ID);
    const profile = vortex_api_1.selectors.profileById(state, profileId);
    const isActive = (modId) => profile?.modState?.[modId]?.enabled ?? false;
    const isSMAPI = (mod) => mod.type === 'SMAPI' && mod.attributes?.modId === 2400;
    const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    const SMAPIMods = Object.values(mods).filter((mod) => isSMAPI(mod) && isActive(mod.id));
    return (SMAPIMods.length === 0)
        ? undefined
        : SMAPIMods.length > 1
            ? SMAPIMods.reduce((prev, iter) => {
                if (prev === undefined) {
                    return iter;
                }
                return ((0, semver_1.gte)(iter.attributes.version, prev.attributes.version)) ? iter : prev;
            }, undefined)
            : SMAPIMods[0];
}
exports.findSMAPIMod = findSMAPIMod;
async function deploySMAPI(api) {
    await vortex_api_1.util.toPromise(cb => api.events.emit('deploy-mods', cb));
    await vortex_api_1.util.toPromise(cb => api.events.emit('start-quick-discovery', () => cb(null)));
    const discovery = vortex_api_1.selectors.discoveryByGame(api.getState(), common_1.GAME_ID);
    const tool = discovery?.tools?.['smapi'];
    if (tool) {
        api.store.dispatch(vortex_api_1.actions.setPrimaryTool(common_1.GAME_ID, tool.id));
    }
}
exports.deploySMAPI = deploySMAPI;
async function downloadSMAPI(api, update) {
    api.dismissNotification('smapi-missing');
    api.sendNotification({
        id: 'smapi-installing',
        message: update ? 'Updating SMAPI' : 'Installing SMAPI',
        type: 'activity',
        noDismiss: true,
        allowSuppress: false,
    });
    if (api.ext?.ensureLoggedIn !== undefined) {
        await api.ext.ensureLoggedIn();
    }
    try {
        const modFiles = await api.ext.nexusGetModFiles(common_1.GAME_ID, constants_1.SMAPI_MOD_ID);
        const fileTime = (input) => Number.parseInt(input.uploaded_time, 10);
        const file = modFiles
            .filter(file => file.category_id === 1)
            .sort((lhs, rhs) => fileTime(lhs) - fileTime(rhs))[0];
        if (file === undefined) {
            throw new vortex_api_1.util.ProcessCanceled('No SMAPI main file found');
        }
        const dlInfo = {
            game: common_1.GAME_ID,
            name: 'SMAPI',
        };
        const nxmUrl = `nxm://${common_1.GAME_ID}/mods/${constants_1.SMAPI_MOD_ID}/files/${file.file_id}`;
        const dlId = await vortex_api_1.util.toPromise(cb => api.events.emit('start-download', [nxmUrl], dlInfo, undefined, cb, undefined, { allowInstall: false }));
        const modId = await vortex_api_1.util.toPromise(cb => api.events.emit('start-install-download', dlId, { allowAutoEnable: false }, cb));
        const profileId = vortex_api_1.selectors.lastActiveProfileForGame(api.getState(), common_1.GAME_ID);
        await vortex_api_1.actions.setModsEnabled(api, profileId, [modId], true, {
            allowAutoDeploy: false,
            installed: true,
        });
        await deploySMAPI(api);
    }
    catch (err) {
        api.showErrorNotification('Failed to download/install SMAPI', err);
        vortex_api_1.util.opn(constants_1.SMAPI_URL).catch(() => null);
    }
    finally {
        api.dismissNotification('smapi-installing');
    }
}
exports.downloadSMAPI = downloadSMAPI;
//# sourceMappingURL=data:application/json;base64,