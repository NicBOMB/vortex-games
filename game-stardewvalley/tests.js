"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testSMAPIOutdated = void 0;
const semver_1 = require("semver");
const SMAPI_1 = require("./SMAPI");
async function testSMAPIOutdated(api, depManager) {
    let currentSMAPIVersion = (0, SMAPI_1.findSMAPIMod)(api)?.attributes?.version;
    if (currentSMAPIVersion === undefined) {
        return Promise.resolve(undefined);
    }
    const isSmapiOutdated = async () => {
        currentSMAPIVersion = (0, SMAPI_1.findSMAPIMod)(api)?.attributes?.version;
        const enabledManifests = await depManager.getManifests();
        const incompatibleModIds = [];
        for (const [id, manifests] of Object.entries(enabledManifests)) {
            const incompatible = manifests.filter((iter) => {
                if (iter.MinimumApiVersion !== undefined) {
                    return !(0, semver_1.gte)(currentSMAPIVersion, (0, semver_1.coerce)(iter.MinimumApiVersion ?? '0.0.0'));
                }
                return false;
            });
            if (incompatible.length > 0) {
                incompatibleModIds.push(id);
            }
        }
        return Promise.resolve((incompatibleModIds.length > 0));
    };
    const outdated = await isSmapiOutdated();
    const t = api.translate;
    return outdated
        ? Promise.resolve({
            description: {
                short: t('SMAPI update required'),
                long: t('Some Stardew Valley mods require a newer version of SMAPI to function correctly, '
                    + 'you should check for SMAPI updates in the mods page.'),
            },
            automaticFix: () => (0, SMAPI_1.downloadSMAPI)(api, true),
            onRecheck: () => isSmapiOutdated(),
            severity: 'warning',
        })
        : Promise.resolve(undefined);
}
exports.testSMAPIOutdated = testSMAPIOutdated;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSxtQ0FBcUM7QUFFckMsbUNBQXNEO0FBRS9DLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxHQUF3QixFQUN4QixVQUE2QjtJQUVuRSxJQUFJLG1CQUFtQixHQUFHLElBQUEsb0JBQVksRUFBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO0lBQ2pFLElBQUksbUJBQW1CLEtBQUssU0FBUyxFQUFFO1FBRXJDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNuQztJQUVELE1BQU0sZUFBZSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ2pDLG1CQUFtQixHQUFHLElBQUEsb0JBQVksRUFBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO1FBQzdELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekQsTUFBTSxrQkFBa0IsR0FBYSxFQUFFLENBQUM7UUFDeEMsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUM5RCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQzdDLElBQUksSUFBSSxDQUFDLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtvQkFDeEMsT0FBTyxDQUFDLElBQUEsWUFBRyxFQUFDLG1CQUFtQixFQUFFLElBQUEsZUFBTSxFQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUM3RTtnQkFDRCxPQUFPLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDM0Isa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdCO1NBQ0Y7UUFDRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLGVBQWUsRUFBRSxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7SUFDeEIsT0FBTyxRQUFRO1FBQ2IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDaEIsV0FBVyxFQUFFO2dCQUNYLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCLENBQUM7Z0JBQ2pDLElBQUksRUFBRSxDQUFDLENBQUMsbUZBQW1GO3NCQUNuRixzREFBc0QsQ0FBQzthQUNoRTtZQUNELFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFBLHFCQUFhLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQztZQUM1QyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFO1lBQ2xDLFFBQVEsRUFBRSxTQUFrQztTQUM3QyxDQUFDO1FBQ0YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQXpDRCw4Q0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlcyB9IGZyb20gJ3ZvcnRleC1hcGknO1xuXG5pbXBvcnQgRGVwZW5kZW5jeU1hbmFnZXIgZnJvbSAnLi9EZXBlbmRlbmN5TWFuYWdlcic7XG5cbmltcG9ydCB7IGNvZXJjZSwgZ3RlIH0gZnJvbSAnc2VtdmVyJztcblxuaW1wb3J0IHsgZG93bmxvYWRTTUFQSSwgZmluZFNNQVBJTW9kIH0gZnJvbSAnLi9TTUFQSSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0U01BUElPdXRkYXRlZChhcGk6IHR5cGVzLklFeHRlbnNpb25BcGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwTWFuYWdlcjogRGVwZW5kZW5jeU1hbmFnZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBQcm9taXNlPHR5cGVzLklUZXN0UmVzdWx0PiB7XG4gIGxldCBjdXJyZW50U01BUElWZXJzaW9uID0gZmluZFNNQVBJTW9kKGFwaSk/LmF0dHJpYnV0ZXM/LnZlcnNpb247XG4gIGlmIChjdXJyZW50U01BUElWZXJzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBTTUFQSSBpc24ndCBpbnN0YWxsZWQgb3IgZW5hYmxlZC5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gIH1cblxuICBjb25zdCBpc1NtYXBpT3V0ZGF0ZWQgPSBhc3luYyAoKSA9PiB7XG4gICAgY3VycmVudFNNQVBJVmVyc2lvbiA9IGZpbmRTTUFQSU1vZChhcGkpPy5hdHRyaWJ1dGVzPy52ZXJzaW9uO1xuICAgIGNvbnN0IGVuYWJsZWRNYW5pZmVzdHMgPSBhd2FpdCBkZXBNYW5hZ2VyLmdldE1hbmlmZXN0cygpO1xuICAgIGNvbnN0IGluY29tcGF0aWJsZU1vZElkczogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtpZCwgbWFuaWZlc3RzXSBvZiBPYmplY3QuZW50cmllcyhlbmFibGVkTWFuaWZlc3RzKSkge1xuICAgICAgY29uc3QgaW5jb21wYXRpYmxlID0gbWFuaWZlc3RzLmZpbHRlcigoaXRlcikgPT4ge1xuICAgICAgICBpZiAoaXRlci5NaW5pbXVtQXBpVmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuICFndGUoY3VycmVudFNNQVBJVmVyc2lvbiwgY29lcmNlKGl0ZXIuTWluaW11bUFwaVZlcnNpb24gPz8gJzAuMC4wJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGluY29tcGF0aWJsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGluY29tcGF0aWJsZU1vZElkcy5wdXNoKGlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgoaW5jb21wYXRpYmxlTW9kSWRzLmxlbmd0aCA+IDApKTtcbiAgfVxuXG4gIGNvbnN0IG91dGRhdGVkID0gYXdhaXQgaXNTbWFwaU91dGRhdGVkKCk7XG4gIGNvbnN0IHQgPSBhcGkudHJhbnNsYXRlO1xuICByZXR1cm4gb3V0ZGF0ZWRcbiAgICA/IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICBzaG9ydDogdCgnU01BUEkgdXBkYXRlIHJlcXVpcmVkJyksXG4gICAgICAgIGxvbmc6IHQoJ1NvbWUgU3RhcmRldyBWYWxsZXkgbW9kcyByZXF1aXJlIGEgbmV3ZXIgdmVyc2lvbiBvZiBTTUFQSSB0byBmdW5jdGlvbiBjb3JyZWN0bHksICdcbiAgICAgICAgICAgICAgKyAneW91IHNob3VsZCBjaGVjayBmb3IgU01BUEkgdXBkYXRlcyBpbiB0aGUgbW9kcyBwYWdlLicpLFxuICAgICAgfSxcbiAgICAgIGF1dG9tYXRpY0ZpeDogKCkgPT4gZG93bmxvYWRTTUFQSShhcGksIHRydWUpLFxuICAgICAgb25SZWNoZWNrOiAoKSA9PiBpc1NtYXBpT3V0ZGF0ZWQoKSxcbiAgICAgIHNldmVyaXR5OiAnd2FybmluZycgYXMgdHlwZXMuUHJvYmxlbVNldmVyaXR5LFxuICAgIH0pXG4gICAgOiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbn0iXX0=