"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModInfoFiles = exports.getModName = exports.makePrefix = exports.reversePrefix = exports.getPrefixOffset = exports.ensureLOFile = exports.genProps = exports.toBlue = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const turbowalk_1 = __importDefault(require("turbowalk"));
const vortex_api_1 = require("vortex-api");
const xml2js_1 = require("xml2js");
const common_1 = require("./common");
function toBlue(func) {
    return (...args) => bluebird_1.default.resolve(func(...args));
}
exports.toBlue = toBlue;
function genProps(context, profileId) {
    const api = context.api;
    const state = api.getState();
    const profile = (profileId !== undefined)
        ? vortex_api_1.selectors.profileById(state, profileId)
        : vortex_api_1.selectors.activeProfile(state);
    if (profile?.gameId !== common_1.GAME_ID) {
        return undefined;
    }
    const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
    if (discovery?.path === undefined) {
        return undefined;
    }
    const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    return { api, state, profile, mods, discovery };
}
exports.genProps = genProps;
async function ensureLOFile(context, profileId, props) {
    if (props === undefined) {
        props = genProps(context, profileId);
    }
    if (props === undefined) {
        return Promise.reject(new vortex_api_1.util.ProcessCanceled('failed to generate game props'));
    }
    const targetPath = (0, common_1.loadOrderFilePath)(props.profile.id);
    try {
        await vortex_api_1.fs.statAsync(targetPath)
            .catch({ code: 'ENOENT' }, () => vortex_api_1.fs.writeFileAsync(targetPath, JSON.stringify([]), { encoding: 'utf8' }));
        return targetPath;
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.ensureLOFile = ensureLOFile;
function getPrefixOffset(api) {
    const state = api.getState();
    const profileId = vortex_api_1.selectors.activeProfile(state)?.id;
    if (profileId === undefined) {
        api.showErrorNotification('No active profile for 7dtd', undefined, { allowReport: false });
        return;
    }
    return state?.settings?.['7daystodie']?.prefixOffset?.[profileId] ?? 0;
}
exports.getPrefixOffset = getPrefixOffset;
function reversePrefix(input) {
    if (input.length !== 3 || input.match(/[A-Z][A-Z][A-Z]/g) === null) {
        throw new vortex_api_1.util.DataInvalid('Invalid input, please provide a valid prefix (AAA-ZZZ)');
    }
    const prefix = input.split('');
    const offset = prefix.reduce((prev, iter, idx) => {
        const pow = 2 - idx;
        const mult = Math.pow(26, pow);
        const charCode = (iter.charCodeAt(0) % 65);
        prev = prev + (charCode * mult);
        return prev;
    }, 0);
    return offset;
}
exports.reversePrefix = reversePrefix;
function makePrefix(input) {
    let res = '';
    let rest = input;
    while (rest > 0) {
        res = String.fromCharCode(65 + (rest % 26)) + res;
        rest = Math.floor(rest / 26);
    }
    return vortex_api_1.util.pad(res, 'A', 3);
}
exports.makePrefix = makePrefix;
async function getModName(modInfoPath) {
    let modInfo;
    try {
        const xmlData = await vortex_api_1.fs.readFileAsync(modInfoPath);
        modInfo = await (0, xml2js_1.parseStringPromise)(xmlData);
        const modName = modInfo?.ModInfo?.[0].Name?.[0]?.$?.value
            || modInfo?.xml.ModInfo?.[0]?.Name?.[0]?.$?.value;
        return (modName !== undefined)
            ? Promise.resolve(modName)
            : Promise.reject(new vortex_api_1.util.DataInvalid('Unexpected modinfo.xml format'));
    }
    catch (err) {
        return Promise.reject(new vortex_api_1.util.DataInvalid('Failed to parse ModInfo.xml file'));
    }
}
exports.getModName = getModName;
async function getModInfoFiles(basePath) {
    let filePaths = [];
    return (0, turbowalk_1.default)(basePath, files => {
        const filtered = files.filter(entry => !entry.isDirectory && path_1.default.basename(entry.filePath) === common_1.MOD_INFO);
        filePaths = filePaths.concat(filtered.map(entry => entry.filePath));
    }, { recurse: true, skipLinks: true })
        .catch(err => ['ENOENT', 'ENOTFOUND'].includes(err.code)
        ? Promise.resolve() : Promise.reject(err))
        .then(() => Promise.resolve(filePaths));
}
exports.getModInfoFiles = getModInfoFiles;
//# sourceMappingURL=data:application/json;base64,