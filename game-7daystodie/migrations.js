"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate1011 = exports.migrate100 = exports.migrate020 = void 0;
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const loadOrder_1 = require("./loadOrder");
function migrate020(api, oldVersion) {
    if (semver_1.default.gte(oldVersion, '0.2.0')) {
        return Promise.resolve();
    }
    const state = api.store.getState();
    const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    const hasMods = Object.keys(mods).length > 0;
    if (!hasMods) {
        return Promise.resolve();
    }
    return new Promise((resolve) => {
        return api.sendNotification({
            id: '7dtd-requires-upgrade',
            type: 'warning',
            message: api.translate('Mods for 7 Days to Die need to be reinstalled', { ns: common_1.I18N_NAMESPACE }),
            noDismiss: true,
            actions: [
                {
                    title: 'Explain',
                    action: () => {
                        api.showDialog('info', '7 Days to Die', {
                            text: 'In version 17 of the game 7 Days to Die the way mods are installed '
                                + 'has changed considerably. Unfortunately we are now not able to support '
                                + 'this change with the way mods were previously installed.\n'
                                + 'This means that for the mods to work correctly you have to reinstall '
                                + 'them.\n'
                                + 'We are sorry for the inconvenience.',
                        }, [
                            { label: 'Close' },
                        ]);
                    },
                },
                {
                    title: 'Understood',
                    action: dismiss => {
                        dismiss();
                        resolve(undefined);
                    },
                },
            ],
        });
    });
}
exports.migrate020 = migrate020;
async function migrate100(context, oldVersion) {
    if (semver_1.default.gte(oldVersion, '1.0.0')) {
        return Promise.resolve();
    }
    const state = context.api.store.getState();
    const discoveryPath = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID]?.path;
    const activatorId = vortex_api_1.selectors.activatorForGame(state, common_1.GAME_ID);
    const activator = vortex_api_1.util.getActivator(activatorId);
    if (discoveryPath === undefined || activator === undefined) {
        return Promise.resolve();
    }
    const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    if (Object.keys(mods).length === 0) {
        return Promise.resolve();
    }
    const profiles = state?.persistent?.profiles ?? {};
    const loProfiles = Object.keys(profiles).filter(id => profiles[id]?.gameId === common_1.GAME_ID);
    const loMap = loProfiles.reduce((accum, iter) => {
        const current = state?.persistent?.loadOrder?.[iter] ?? [];
        const newLO = current.map(entry => {
            return {
                enabled: true,
                name: (mods[entry] !== undefined)
                    ? vortex_api_1.util.renderModName(mods[entry])
                    : entry,
                id: entry,
                modId: entry,
            };
        });
        accum[iter] = newLO;
        return accum;
    }, {});
    for (const profileId of Object.keys(loMap)) {
        await (0, loadOrder_1.serialize)(context, loMap[profileId], undefined, profileId);
    }
    const modsPath = path_1.default.join(discoveryPath, (0, common_1.modsRelPath)());
    return context.api.awaitUI()
        .then(() => vortex_api_1.fs.ensureDirWritableAsync(modsPath))
        .then(() => context.api.emitAndAwait('purge-mods-in-path', common_1.GAME_ID, '', modsPath))
        .then(() => context.api.store.dispatch(vortex_api_1.actions.setDeploymentNecessary(common_1.GAME_ID, true)));
}
exports.migrate100 = migrate100;
async function migrate1011(context, oldVersion) {
    if (semver_1.default.gte(oldVersion, '1.0.11')) {
        return Promise.resolve();
    }
    const state = context.api.store.getState();
    const discoveryPath = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID]?.path;
    if (!discoveryPath) {
        return Promise.resolve();
    }
    const mods = state?.persistent?.mods?.[common_1.GAME_ID];
    if (Object.keys(mods).length === 0) {
        return Promise.resolve();
    }
    const profiles = state?.persistent?.profiles ?? {};
    const loProfiles = Object.keys(profiles).filter(id => profiles[id]?.gameId === common_1.GAME_ID);
    const loMap = loProfiles.reduce((accum, iter) => {
        const lo = state?.persistent?.loadOrder?.[iter] ?? [];
        accum[iter] = lo;
        return accum;
    }, {});
    for (const profileId of Object.keys(loMap)) {
        try {
            await (0, loadOrder_1.serialize)(context, loMap[profileId], undefined, profileId);
            await vortex_api_1.fs.removeAsync(path_1.default.join(discoveryPath, `${profileId}_loadOrder.json`)).catch(err => null);
        }
        catch (err) {
            return Promise.reject(new Error(`Failed to migrate load order for ${profileId}: ${err}`));
        }
    }
    const modsPath = path_1.default.join(discoveryPath, (0, common_1.modsRelPath)());
    return context.api.awaitUI()
        .then(() => vortex_api_1.fs.ensureDirWritableAsync(modsPath))
        .then(() => context.api.emitAndAwait('purge-mods-in-path', common_1.GAME_ID, '', modsPath))
        .then(() => context.api.store.dispatch(vortex_api_1.actions.setDeploymentNecessary(common_1.GAME_ID, true)));
}
exports.migrate1011 = migrate1011;
//# sourceMappingURL=data:application/json;base64,