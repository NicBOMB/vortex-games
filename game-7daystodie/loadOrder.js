"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.deserialize = exports.serialize = void 0;
const _ = __importStar(require("lodash"));
const vortex_api_1 = require("vortex-api");
const actions_1 = require("./actions");
const common_1 = require("./common");
const util_1 = require("./util");
function isLODifferent(prev, current) {
    const diff = _.difference(prev, current);
    if (diff.length > 0) {
        return true;
    }
    return false;
}
function corruptLODialog(props, filePath, err) {
    return new Promise((resolve, reject) => {
        props.api.showDialog('error', 'Corrupt load order file', {
            bbcode: props.api.translate('The load order file is in a corrupt state or missing. '
                + 'You can try to fix it yourself or Vortex can regenerate the file for you, but '
                + 'that may result in loss of data. Will only affect load order items you added manually, if any).'),
        }, [
            { label: 'Cancel', action: () => reject(err) },
            {
                label: 'Regenerate File',
                action: async () => {
                    await vortex_api_1.fs.removeAsync(filePath).catch(err2 => null);
                    return resolve([]);
                },
            },
        ]);
    });
}
async function serialize(context, loadOrder, previousLO, profileId) {
    const props = (0, util_1.genProps)(context);
    if (props === undefined) {
        return Promise.reject(new vortex_api_1.util.ProcessCanceled('invalid props'));
    }
    const loFilePath = await (0, util_1.ensureLOFile)(context, profileId, props);
    const filteredLO = loadOrder.filter(lo => !common_1.INVALID_LO_MOD_TYPES.includes(props.mods?.[lo?.modId]?.type));
    const offset = (0, util_1.getPrefixOffset)(context.api);
    const prefixedLO = filteredLO.map((loEntry, idx) => {
        const prefix = (0, util_1.makePrefix)(idx + offset);
        const data = {
            prefix,
        };
        return { ...loEntry, data };
    });
    const fileData = await vortex_api_1.fs.readFileAsync(loFilePath, { encoding: 'utf8' })
        .catch(err => (err.code === 'ENOENT')
        ? Promise.resolve('[]')
        : Promise.reject(err));
    let savedLO = [];
    try {
        savedLO = JSON.parse(fileData);
    }
    catch (err) {
        savedLO = await corruptLODialog(props, loFilePath, err);
    }
    const batchedActions = [];
    batchedActions.push((0, actions_1.setPreviousLO)(props.profile.id, previousLO));
    vortex_api_1.util.batchDispatch(context.api.store, batchedActions);
    await vortex_api_1.fs.removeAsync(loFilePath).catch({ code: 'ENOENT' }, () => Promise.resolve());
    await vortex_api_1.util.writeFileAtomic(loFilePath, JSON.stringify(prefixedLO));
    return Promise.resolve();
}
exports.serialize = serialize;
async function deserialize(context) {
    const props = (0, util_1.genProps)(context);
    if (props?.profile?.gameId !== common_1.GAME_ID) {
        return [];
    }
    const currentModsState = props.profile?.modState ?? {};
    const enabledModIds = Object.keys(currentModsState)
        .filter(modId => currentModsState?.[modId]?.enabled ?? false);
    const mods = props.state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    let data = [];
    let loFilePath;
    try {
        try {
            loFilePath = await (0, util_1.ensureLOFile)(context);
            const fileData = await vortex_api_1.fs.readFileAsync(loFilePath, { encoding: 'utf8' });
            data = JSON.parse(fileData);
        }
        catch (err) {
            data = await corruptLODialog(props, loFilePath, err);
        }
        const filteredData = data.filter(entry => enabledModIds.includes(entry.id));
        const offset = (0, util_1.getPrefixOffset)(context.api);
        const diff = enabledModIds.filter(id => (!common_1.INVALID_LO_MOD_TYPES.includes(mods[id]?.type))
            && (filteredData.find(loEntry => loEntry.id === id) === undefined));
        diff.forEach((missingEntry, idx) => {
            filteredData.push({
                id: missingEntry,
                modId: missingEntry,
                enabled: true,
                name: mods[missingEntry] !== undefined
                    ? vortex_api_1.util.renderModName(mods[missingEntry])
                    : missingEntry,
                data: {
                    prefix: (0, util_1.makePrefix)(idx + filteredData.length + offset),
                },
            });
        });
        return filteredData;
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.deserialize = deserialize;
async function validate(prev, current) {
    return undefined;
}
exports.validate = validate;
//# sourceMappingURL=data:application/json;base64,