"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCollectionsData = exports.genCollectionsData = void 0;
const vortex_api_1 = require("vortex-api");
const loadOrder_1 = require("./loadOrder");
const collectionUtil_1 = require("./collectionUtil");
async function genCollectionsData(context, gameId, includedMods) {
    const api = context.api;
    const state = api.getState();
    const profile = vortex_api_1.selectors.activeProfile(state);
    const mods = state?.persistent?.mods?.[gameId] ?? {};
    try {
        const loadOrder = await (0, loadOrder_1.exportLoadOrder)(api.getState(), includedMods, mods);
        const collectionData = { loadOrder };
        return Promise.resolve(collectionData);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.genCollectionsData = genCollectionsData;
async function parseCollectionsData(context, gameId, collection) {
    const api = context.api;
    const state = api.getState();
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, gameId);
    const profile = vortex_api_1.selectors.profileById(state, profileId);
    if (profile?.gameId !== gameId) {
        const collectionName = collection['info']?.['name'] !== undefined ? collection['info']['name'] : 'Witcher 3 Collection';
        return Promise.reject(new collectionUtil_1.CollectionParseError(collectionName, 'Last active profile is missing'));
    }
    try {
        await (0, loadOrder_1.importLoadOrder)(api, collection);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.parseCollectionsData = parseCollectionsData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBOEM7QUFPOUMsMkNBQStEO0FBRS9ELHFEQUF3RDtBQUVqRCxLQUFLLFVBQVUsa0JBQWtCLENBQUMsT0FBZ0MsRUFDaEMsTUFBYyxFQUNkLFlBQXNCO0lBQzdELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDeEIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLE1BQU0sT0FBTyxHQUFHLHNCQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLE1BQU0sSUFBSSxHQUFHLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JELElBQUk7UUFDRixNQUFNLFNBQVMsR0FBZSxNQUFNLElBQUEsMkJBQWUsRUFBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hGLE1BQU0sY0FBYyxHQUFxQixFQUFFLFNBQVMsRUFBRSxDQUFDO1FBQ3ZELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUN4QztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzVCO0FBQ0gsQ0FBQztBQWRELGdEQWNDO0FBRU0sS0FBSyxVQUFVLG9CQUFvQixDQUFDLE9BQWdDLEVBQ2hDLE1BQWMsRUFDZCxVQUE0QjtJQUNyRSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ3hCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixNQUFNLFNBQVMsR0FBRyxzQkFBUyxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNwRSxNQUFNLE9BQU8sR0FBRyxzQkFBUyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDeEQsSUFBSSxPQUFPLEVBQUUsTUFBTSxLQUFLLE1BQU0sRUFBRTtRQUM5QixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFDeEgsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUkscUNBQW9CLENBQUMsY0FBYyxFQUMzRCxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7S0FDdEM7SUFDRCxJQUFJO1FBQ0YsTUFBTSxJQUFBLDJCQUFlLEVBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBakJELG9EQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdG9ycywgdHlwZXMgfSBmcm9tICd2b3J0ZXgtYXBpJztcblxuaW1wb3J0IHsgR0FNRV9JRCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmltcG9ydCB7IElMb2FkT3JkZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBJQ29sbGVjdGlvbnNEYXRhICB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgeyBleHBvcnRMb2FkT3JkZXIsIGltcG9ydExvYWRPcmRlciB9IGZyb20gJy4vbG9hZE9yZGVyJztcblxuaW1wb3J0IHsgQ29sbGVjdGlvblBhcnNlRXJyb3IgfSBmcm9tICcuL2NvbGxlY3Rpb25VdGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbkNvbGxlY3Rpb25zRGF0YShjb250ZXh0OiB0eXBlcy5JRXh0ZW5zaW9uQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkTW9kczogc3RyaW5nW10pIHtcbiAgY29uc3QgYXBpID0gY29udGV4dC5hcGk7XG4gIGNvbnN0IHN0YXRlID0gYXBpLmdldFN0YXRlKCk7XG4gIGNvbnN0IHByb2ZpbGUgPSBzZWxlY3RvcnMuYWN0aXZlUHJvZmlsZShzdGF0ZSk7XG4gIGNvbnN0IG1vZHMgPSBzdGF0ZT8ucGVyc2lzdGVudD8ubW9kcz8uW2dhbWVJZF0gPz8ge307XG4gIHRyeSB7XG4gICAgY29uc3QgbG9hZE9yZGVyOiBJTG9hZE9yZGVyID0gYXdhaXQgZXhwb3J0TG9hZE9yZGVyKGFwaS5nZXRTdGF0ZSgpLCBpbmNsdWRlZE1vZHMsIG1vZHMpO1xuICAgIGNvbnN0IGNvbGxlY3Rpb25EYXRhOiBJQ29sbGVjdGlvbnNEYXRhID0geyBsb2FkT3JkZXIgfTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbGxlY3Rpb25EYXRhKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhcnNlQ29sbGVjdGlvbnNEYXRhKGNvbnRleHQ6IHR5cGVzLklFeHRlbnNpb25Db250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVJZDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IElDb2xsZWN0aW9uc0RhdGEpIHtcbiAgY29uc3QgYXBpID0gY29udGV4dC5hcGk7XG4gIGNvbnN0IHN0YXRlID0gYXBpLmdldFN0YXRlKCk7XG4gIGNvbnN0IHByb2ZpbGVJZCA9IHNlbGVjdG9ycy5sYXN0QWN0aXZlUHJvZmlsZUZvckdhbWUoc3RhdGUsIGdhbWVJZCk7XG4gIGNvbnN0IHByb2ZpbGUgPSBzZWxlY3RvcnMucHJvZmlsZUJ5SWQoc3RhdGUsIHByb2ZpbGVJZCk7XG4gIGlmIChwcm9maWxlPy5nYW1lSWQgIT09IGdhbWVJZCkge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvblsnaW5mbyddPy5bJ25hbWUnXSAhPT0gdW5kZWZpbmVkID8gY29sbGVjdGlvblsnaW5mbyddWyduYW1lJ10gOiAnV2l0Y2hlciAzIENvbGxlY3Rpb24nO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgQ29sbGVjdGlvblBhcnNlRXJyb3IoY29sbGVjdGlvbk5hbWUsXG4gICAgICAnTGFzdCBhY3RpdmUgcHJvZmlsZSBpcyBtaXNzaW5nJykpO1xuICB9XG4gIHRyeSB7XG4gICAgYXdhaXQgaW1wb3J0TG9hZE9yZGVyKGFwaSwgY29sbGVjdGlvbik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG59XG4iXX0=