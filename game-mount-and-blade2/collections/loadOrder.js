"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importLoadOrder = exports.exportLoadOrder = void 0;
const vortex_api_1 = require("vortex-api");
const common_1 = require("../common");
const collectionUtil_1 = require("./collectionUtil");
async function exportLoadOrder(state, modIds, mods) {
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, common_1.GAME_ID);
    if (profileId === undefined) {
        return Promise.reject(new collectionUtil_1.CollectionGenerateError('Invalid profile id'));
    }
    const loadOrder = state?.persistent?.loadOrder?.[profileId];
    if (loadOrder === undefined) {
        return Promise.resolve(undefined);
    }
    const includedMods = modIds.reduce((accum, iter) => {
        if (mods[iter] !== undefined) {
            accum[iter] = mods[iter];
        }
        return accum;
    }, {});
    const filteredLO = (0, collectionUtil_1.genCollectionLoadOrder)(loadOrder, includedMods);
    return Promise.resolve(filteredLO);
}
exports.exportLoadOrder = exportLoadOrder;
async function importLoadOrder(api, collection) {
    const state = api.getState();
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, common_1.GAME_ID);
    if (profileId === undefined) {
        return Promise.reject(new collectionUtil_1.CollectionParseError(collection?.['info']?.['name'] || '', 'Invalid profile id'));
    }
    return new Promise((resolve, reject) => {
        api.events.emit('deploy-mods', (err) => {
            if (!!err) {
                return reject(err);
            }
            else {
                api.store.dispatch(vortex_api_1.actions.setLoadOrder(profileId, collection.loadOrder));
                return resolve();
            }
        });
    });
}
exports.importLoadOrder = importLoadOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZE9yZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9hZE9yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUF1RDtBQUN2RCxzQ0FBb0M7QUFJcEMscURBQ2tGO0FBRTNFLEtBQUssVUFBVSxlQUFlLENBQUMsS0FBbUIsRUFDbkIsTUFBZ0IsRUFDaEIsSUFBcUM7SUFFekUsTUFBTSxTQUFTLEdBQUcsc0JBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsZ0JBQU8sQ0FBQyxDQUFDO0lBQ3JFLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUMzQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSx3Q0FBdUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7S0FDMUU7SUFFRCxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtRQU8zQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbkM7SUFFRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ2pELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUCxNQUFNLFVBQVUsR0FBZSxJQUFBLHVDQUFzQixFQUFDLFNBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdEYsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUE1QkQsMENBNEJDO0FBRU0sS0FBSyxVQUFVLGVBQWUsQ0FBQyxHQUF3QixFQUN4QixVQUE0QjtJQUNoRSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsTUFBTSxTQUFTLEdBQUcsc0JBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsZ0JBQU8sQ0FBQyxDQUFDO0lBQ3JFLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUMzQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxxQ0FBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7S0FDN0c7SUFJRCxPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzNDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtnQkFDVCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNwQjtpQkFBTTtnQkFDTCxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQWdCLENBQUMsQ0FBQyxDQUFDO2dCQUNqRixPQUFPLE9BQU8sRUFBRSxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFyQkQsMENBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWN0aW9ucywgc2VsZWN0b3JzLCB0eXBlcyB9IGZyb20gJ3ZvcnRleC1hcGknO1xuaW1wb3J0IHsgR0FNRV9JRCB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBJTG9hZE9yZGVyLCBJTG9hZE9yZGVyRW50cnkgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBJQ29sbGVjdGlvbnNEYXRhIH0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7IENvbGxlY3Rpb25HZW5lcmF0ZUVycm9yLCBDb2xsZWN0aW9uUGFyc2VFcnJvcixcbiAgZ2VuQ29sbGVjdGlvbkxvYWRPcmRlciwgaXNNb2RJbkNvbGxlY3Rpb24sIGlzVmFsaWRNb2QgfSBmcm9tICcuL2NvbGxlY3Rpb25VdGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4cG9ydExvYWRPcmRlcihzdGF0ZTogdHlwZXMuSVN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RJZHM6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RzOiB7IFttb2RJZDogc3RyaW5nXTogdHlwZXMuSU1vZCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFByb21pc2U8SUxvYWRPcmRlcj4ge1xuICBjb25zdCBwcm9maWxlSWQgPSBzZWxlY3RvcnMubGFzdEFjdGl2ZVByb2ZpbGVGb3JHYW1lKHN0YXRlLCBHQU1FX0lEKTtcbiAgaWYgKHByb2ZpbGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBDb2xsZWN0aW9uR2VuZXJhdGVFcnJvcignSW52YWxpZCBwcm9maWxlIGlkJykpO1xuICB9XG5cbiAgY29uc3QgbG9hZE9yZGVyID0gc3RhdGU/LnBlcnNpc3RlbnQ/LmxvYWRPcmRlcj8uW3Byb2ZpbGVJZF07XG4gIGlmIChsb2FkT3JkZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFRoaXMgaXMgdGhlb3JldGljYWxseSBcImZpbmVcIiAtIHRoZSB1c2VyIG1heSBoYXZlIHNpbXBseVxuICAgIC8vICBkb3dubG9hZGVkIHRoZSBtb2RzIGFuZCBpbW1lZGlhdGVseSBjcmVhdGVkIHRoZSBjb2xsZWN0aW9uXG4gICAgLy8gIHdpdGhvdXQgYWN0dWFsbHkgc2V0dGluZyB1cCBhIGxvYWQgb3JkZXIuIEFsdGVybmF0aXZlbHlcbiAgICAvLyAgdGhlIGdhbWUgZXh0ZW5zaW9uIGl0c2VsZiBtaWdodCBiZSBoYW5kbGluZyB0aGUgcHJlc29ydCBmdW5jdGlvbmFsaXR5XG4gICAgLy8gIGVycm9uZW91c2x5LiBSZWdhcmRsZXNzLCB0aGUgY29sbGVjdGlvbiBjcmVhdGlvbiBzaG91bGRuJ3QgYmUgYmxvY2tlZFxuICAgIC8vICBieSB0aGUgaW5leGlzdGFuY2Ugb2YgYSBsb2FkT3JkZXIuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICB9XG5cbiAgY29uc3QgaW5jbHVkZWRNb2RzID0gbW9kSWRzLnJlZHVjZSgoYWNjdW0sIGl0ZXIpID0+IHtcbiAgICBpZiAobW9kc1tpdGVyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhY2N1bVtpdGVyXSA9IG1vZHNbaXRlcl07XG4gICAgfVxuICAgIHJldHVybiBhY2N1bTtcbiAgfSwge30pOyAvL0ZJWE1FICdMb2FkT3JkZXInIGlzIG5vdCB7W21vZElEOiBzdHJpbmddOiAnSUxvYWRPcmRlckVudHJ5W10nfVxuICBjb25zdCBmaWx0ZXJlZExPOiBJTG9hZE9yZGVyID0gZ2VuQ29sbGVjdGlvbkxvYWRPcmRlcihsb2FkT3JkZXIgYXMgYW55LCBpbmNsdWRlZE1vZHMpO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZpbHRlcmVkTE8pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0TG9hZE9yZGVyKGFwaTogdHlwZXMuSUV4dGVuc2lvbkFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogSUNvbGxlY3Rpb25zRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBzdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuXG4gIGNvbnN0IHByb2ZpbGVJZCA9IHNlbGVjdG9ycy5sYXN0QWN0aXZlUHJvZmlsZUZvckdhbWUoc3RhdGUsIEdBTUVfSUQpO1xuICBpZiAocHJvZmlsZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IENvbGxlY3Rpb25QYXJzZUVycm9yKGNvbGxlY3Rpb24/LlsnaW5mbyddPy5bJ25hbWUnXSB8fCAnJywgJ0ludmFsaWQgcHJvZmlsZSBpZCcpKTtcbiAgfVxuXG4gIC8vIFRoZSBtb2RzIG5lZWQgdG8gYmUgZGVwbG95ZWQgaW4gb3JkZXIgZm9yIHRoZSBsb2FkIG9yZGVyIHRvIGJlIGltcG9ydGVkXG4gIC8vICBjb3JyZWN0bHkuXG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXBpLmV2ZW50cy5lbWl0KCdkZXBsb3ktbW9kcycsIChlcnIpID0+IHtcbiAgICAgIGlmICghIWVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGkuc3RvcmUuZGlzcGF0Y2goYWN0aW9ucy5zZXRMb2FkT3JkZXIocHJvZmlsZUlkLCBjb2xsZWN0aW9uLmxvYWRPcmRlciBhcyBhbnkpKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=