"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const turbowalk_1 = __importDefault(require("turbowalk"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const util_1 = require("./util");
const DEP_XML_LIST = 'DependedModuleMetadatas';
const DEP_XML_ELEMENT = 'DependedModuleMetadata';
class ComMetadataManager {
    constructor(api) {
        this.mApi = api;
        this.mDependencyMap = undefined;
    }
    isOptional(subModId, depId) {
        const dependency = (this.mDependencyMap[subModId]?.dependencies || []).find(dep => dep.id === depId);
        if (dependency === undefined) {
            return false;
        }
        return dependency.optional;
    }
    getDependencies(subModId) {
        return [].concat((this.mDependencyMap[subModId]?.dependencies || []).filter(dep => dep.order === 'LoadBeforeThis'), Object.keys(this.mDependencyMap).reduce((accum, iter) => {
            const subModule = this.mDependencyMap[iter];
            const deps = subModule.dependencies.filter(dep => dep.id === subModId && dep.order === 'LoadAfterThis');
            if (deps.length > 0) {
                const newDep = {
                    id: subModule.id,
                    incompatible: deps[0].incompatible,
                    optional: deps[0].optional,
                    order: 'LoadAfterThis',
                    version: (0, util_1.getCleanVersion)(subModule.id, deps[0].version),
                };
                accum = [].concat(accum, newDep);
            }
            return accum;
        }, []));
    }
    async updateDependencyMap(profileId) {
        const props = (0, util_1.genProps)(this.mApi, profileId);
        if (props === undefined) {
            this.mApi.showErrorNotification('Failed to update Dependency map', 'Game is not discovered and/or profile is invalid', { allowReport: false });
            return;
        }
        this.mDependencyMap = await this.genDependencyMap(props);
    }
    async parseSubModFile(filePath) {
        const getAttrValue = (node, attr, optional = true) => {
            try {
                const value = node?.$?.[attr];
                return Promise.resolve(value);
            }
            catch (err) {
                return optional
                    ? Promise.resolve(undefined)
                    : Promise.reject(new Error(`missing ${attr}`));
            }
        };
        let subModId;
        const dependencies = [];
        try {
            const data = await (0, util_1.getXMLData)(filePath);
            subModId = data?.Module?.Id?.[0]?.$?.value;
            const depNodes = data?.Module?.DependedModuleMetadatas?.[0]?.DependedModuleMetadata || [];
            for (const node of depNodes) {
                try {
                    const id = await getAttrValue(node, 'id', false);
                    let version = await getAttrValue(node, 'version');
                    version = (0, util_1.getCleanVersion)(id, version);
                    const dep = {
                        id,
                        optional: await getAttrValue(node, 'optional') === 'true',
                        order: await getAttrValue(node, 'order'),
                        version,
                        incompatible: await getAttrValue(node, 'incompatible') === 'true',
                    };
                    dependencies.push(dep);
                }
                catch (err) {
                    (0, vortex_api_1.log)('error', 'unable to parse community dependency', err);
                }
            }
        }
        catch (err) {
            (0, vortex_api_1.log)('error', 'failed to parse SubModule.xml', err);
            return;
        }
        return { id: subModId, dependencies };
    }
    async findSubModFiles(modPath) {
        let fileEntries = [];
        try {
            await (0, turbowalk_1.default)(modPath, entries => {
                const filtered = entries.filter(entry => !entry.isDirectory
                    && path_1.default.basename(entry.filePath).toLowerCase() === common_1.SUBMOD_FILE);
                fileEntries = fileEntries.concat(filtered);
            }).catch(err => ['ENOENT', 'ENOTFOUND'].includes(err.code)
                ? Promise.resolve()
                : Promise.reject(err));
        }
        catch (err) {
            (0, vortex_api_1.log)('error', 'unable to find submodule files', err);
            return fileEntries;
        }
        return fileEntries;
    }
    async genDependencyMap(props) {
        const { state, enabledMods } = props;
        const stagingFolder = vortex_api_1.selectors.installPathForGame(state, common_1.GAME_ID);
        const depMap = {};
        for (const modId of Object.keys(enabledMods)) {
            const mod = enabledMods[modId];
            if (mod?.installationPath === undefined) {
                continue;
            }
            const modFolder = path_1.default.join(stagingFolder, mod.installationPath);
            const subModFiles = await this.findSubModFiles(modFolder);
            for (const subModFile of subModFiles) {
                const subModData = await this.parseSubModFile(subModFile.filePath);
                if (subModData?.id !== undefined) {
                    depMap[subModData.id] = subModData;
                }
            }
        }
        return depMap;
    }
}
exports.default = ComMetadataManager;
//# sourceMappingURL=data:application/json;base64,