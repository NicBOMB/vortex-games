"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.walkAsync = exports.getCleanVersion = exports.refreshGameParams = exports.getElementValue = exports.genProps = exports.getXMLData = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const vortex_api_1 = require("vortex-api");
const xml2js_1 = require("xml2js");
const common_1 = require("./common");
const subModCache_1 = require("./subModCache");
const PARAMS_TEMPLATE = ['/{{gameMode}}', '_MODULES_{{subModIds}}*_MODULES_'];
async function getXMLData(xmlFilePath) {
    return vortex_api_1.fs.readFileAsync(xmlFilePath)
        .then(async (data) => {
        try {
            const xmlData = await (0, xml2js_1.parseStringPromise)(data);
            return Promise.resolve(xmlData);
        }
        catch (err) {
            return Promise.reject(new vortex_api_1.util.DataInvalid(err.message));
        }
    })
        .catch(err => (err.code === 'ENOENT')
        ? Promise.reject(new vortex_api_1.util.NotFound(xmlFilePath))
        : Promise.reject(new vortex_api_1.util.DataInvalid(err.message)));
}
exports.getXMLData = getXMLData;
function genProps(api, profileId) {
    const state = api.getState();
    const profile = (profileId !== undefined)
        ? vortex_api_1.selectors.profileById(state, profileId)
        : vortex_api_1.selectors.activeProfile(state);
    if (profile?.gameId !== common_1.GAME_ID) {
        return undefined;
    }
    const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
    if (discovery?.path === undefined) {
        return undefined;
    }
    const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    const enabledMods = Object.keys(mods)
        .filter(id => profile?.modState?.[id]?.enabled ?? false)
        .reduce((accum, id) => {
        accum[id] = mods[id];
        return accum;
    }, {});
    return { state, profile, discovery, enabledMods };
}
exports.genProps = genProps;
async function getElementValue(subModuleFilePath, elementName) {
    const logAndContinue = () => {
        (0, vortex_api_1.log)('error', 'Unable to parse xml element', elementName);
        return Promise.resolve(undefined);
    };
    return vortex_api_1.fs.readFileAsync(subModuleFilePath, { encoding: 'utf-8' })
        .then(async (xmlData) => {
        try {
            const modInfo = await (0, xml2js_1.parseStringPromise)(xmlData);
            const element = modInfo?.Module?.[elementName];
            return ((element !== undefined) && (element?.[0]?.$?.value !== undefined))
                ? Promise.resolve(element?.[0]?.$?.value)
                : logAndContinue();
        }
        catch (err) {
            const errorMessage = 'Vortex was unable to parse: ' + subModuleFilePath + '; please inform the mod author';
            return Promise.reject(new vortex_api_1.util.DataInvalid(errorMessage));
        }
    });
}
exports.getElementValue = getElementValue;
async function refreshGameParams(context, loadOrder) {
    const LAUNCHER_DATA = (0, subModCache_1.getLauncherData)();
    const enabled = (!!loadOrder && Object.keys(loadOrder).length > 0)
        ? Object.keys(loadOrder)
            .filter(key => loadOrder[key].enabled)
            .sort((lhs, rhs) => loadOrder[lhs].pos - loadOrder[rhs].pos)
            .reduce((accum, key) => {
            const CACHE = (0, subModCache_1.getCache)();
            const cacheKeys = Object.keys(CACHE);
            const entry = cacheKeys.find(cacheElement => CACHE[cacheElement].vortexId === key);
            if (!!entry) {
                accum.push(entry);
            }
            return accum;
        }, [])
        : LAUNCHER_DATA.singlePlayerSubMods
            .filter(subMod => subMod.enabled)
            .map(subMod => subMod.subModId);
    const parameters = [
        PARAMS_TEMPLATE[0].replace('{{gameMode}}', 'singleplayer'),
        PARAMS_TEMPLATE[1].replace('{{subModIds}}', enabled.map(key => `*${key}`).join('')),
    ];
    context.api.store.dispatch(vortex_api_1.actions.setGameParameters(common_1.GAME_ID, {
        executable: common_1.BANNERLORD_EXEC,
        parameters,
    }));
    return Promise.resolve();
}
exports.refreshGameParams = refreshGameParams;
function getCleanVersion(subModId, unsanitized) {
    if (!unsanitized) {
        (0, vortex_api_1.log)('debug', 'failed to sanitize/coerce version', { subModId, unsanitized });
        return undefined;
    }
    try {
        const sanitized = unsanitized.replace(/[a-z]|[A-Z]/g, '');
        const coerced = semver_1.default.coerce(sanitized);
        return coerced.version;
    }
    catch (err) {
        (0, vortex_api_1.log)('debug', 'failed to sanitize/coerce version', { subModId, unsanitized, error: err.message });
        return undefined;
    }
}
exports.getCleanVersion = getCleanVersion;
async function walkAsync(dir, levelsDeep = 2) {
    let entries = [];
    return vortex_api_1.fs.readdirAsync(dir).then(files => {
        const filtered = files.filter(file => !file.endsWith('.vortex_backup'));
        return bluebird_1.default.each(filtered, file => {
            const fullPath = path_1.default.join(dir, file);
            return vortex_api_1.fs.statAsync(fullPath).then(stats => {
                if (stats.isDirectory() && levelsDeep > 0) {
                    return walkAsync(fullPath, levelsDeep - 1)
                        .then(nestedFiles => {
                        entries = entries.concat(nestedFiles);
                        return Promise.resolve();
                    });
                }
                else {
                    entries.push(fullPath);
                    return Promise.resolve();
                }
            }).catch(err => {
                (0, vortex_api_1.log)('error', 'MnB2: invalid symlink', err);
                return (err.code === 'ENOENT')
                    ? Promise.resolve()
                    : Promise.reject(err);
            });
        });
    })
        .then(() => Promise.resolve(entries));
}
exports.walkAsync = walkAsync;
//# sourceMappingURL=data:application/json;base64,