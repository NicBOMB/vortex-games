"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidationInfo = exports.isInvalid = exports.parseLauncherData = exports.refreshCache = exports.getCache = exports.getLauncherData = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const util_1 = require("./util");
const XML_EL_MULTIPLAYER = 'MultiplayerModule';
const LAUNCHER_DATA_PATH = path_1.default.join(vortex_api_1.util.getVortexPath('documents'), 'Mount and Blade II Bannerlord', 'Configs', 'LauncherData.xml');
const LAUNCHER_DATA = {
    singlePlayerSubMods: [],
    multiplayerSubMods: [],
};
function getLauncherData() {
    return LAUNCHER_DATA;
}
exports.getLauncherData = getLauncherData;
let CACHE = {};
function getCache() {
    return CACHE;
}
exports.getCache = getCache;
async function refreshCache(context, metaManager) {
    try {
        CACHE = {};
        const subModuleFilePaths = await getDeployedSubModPaths(context);
        CACHE = await getDeployedModData(context, subModuleFilePaths, metaManager);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.refreshCache = refreshCache;
async function getDeployedSubModPaths(context) {
    const state = context.api.store.getState();
    const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
    if (discovery?.path === undefined) {
        return Promise.reject(new vortex_api_1.util.ProcessCanceled('game discovery is incomplete'));
    }
    const modulePath = path_1.default.join(discovery.path, common_1.MODULES);
    let moduleFiles;
    try {
        moduleFiles = await (0, util_1.walkAsync)(modulePath);
    }
    catch (err) {
        if (err instanceof vortex_api_1.util.UserCanceled) {
            return Promise.resolve([]);
        }
        const isMissingOfficialModules = ((err.code === 'ENOENT')
            && ([].concat([common_1.MODULES], Array.from(common_1.OFFICIAL_MODULES)))
                .indexOf(path_1.default.basename(err.path)) !== -1);
        const errorMsg = isMissingOfficialModules
            ? 'Game files are missing - please re-install the game'
            : err.message;
        context.api.showErrorNotification(errorMsg, err);
        return Promise.resolve([]);
    }
    const subModules = moduleFiles.filter(file => path_1.default.basename(file).toLowerCase() === common_1.SUBMOD_FILE);
    return Promise.resolve(subModules);
}
async function getDeployedModData(context, subModuleFilePaths, metaManager) {
    const state = context.api.getState();
    const profileId = vortex_api_1.selectors.activeProfile(state)?.id;
    if (profileId === undefined) {
        return undefined;
    }
    await metaManager.updateDependencyMap(profileId);
    const managedIds = await getManagedIds(context);
    return bluebird_1.default.reduce(subModuleFilePaths, async (accum, subModFile) => {
        try {
            const getAttrValue = (node, attr) => node?.[attr]?.[0]?.$?.value;
            const subModData = await (0, util_1.getXMLData)(subModFile);
            const module = subModData?.Module;
            const subModId = getAttrValue(module, 'Id');
            const comDependencies = metaManager.getDependencies(subModId);
            const subModVerData = getAttrValue(module, 'Version');
            const subModVer = (0, util_1.getCleanVersion)(subModId, subModVerData);
            const managedEntry = managedIds.find(entry => entry.subModId === subModId);
            const isMultiplayer = getAttrValue(module, XML_EL_MULTIPLAYER) !== undefined;
            const officialDepNodes = module?.DependedModules?.[0]?.DependedModule || [];
            let dependencies = [];
            const getOfficialDepNodes = () => officialDepNodes
                .filter(depNode => comDependencies.find(dep => dep.id === depNode?.$?.Id) === undefined)
                .map(depNode => {
                let depVersion;
                const depId = depNode?.$?.Id;
                try {
                    const unsanitized = depNode?.$?.DependentVersion;
                    depVersion = (0, util_1.getCleanVersion)(subModId, unsanitized);
                }
                catch (err) {
                    (0, vortex_api_1.log)('debug', 'failed to resolve dependency version', { subModId, error: err.message });
                }
                const dependency = {
                    id: depId,
                    incompatible: false,
                    optional: false,
                    order: 'LoadAfterThis',
                    version: depVersion,
                };
                return dependency;
            });
            try {
                dependencies = (comDependencies.length > 0)
                    ? [].concat(getOfficialDepNodes(), comDependencies)
                    : getOfficialDepNodes();
            }
            catch (err) {
                (0, vortex_api_1.log)('debug', 'submodule has no dependencies or is invalid', err);
            }
            const subModName = getAttrValue(module, 'Name');
            accum[subModId] = {
                subModId,
                subModName,
                subModVer,
                subModFile,
                vortexId: !!managedEntry ? managedEntry.vortexId : subModId,
                isOfficial: common_1.OFFICIAL_MODULES.has(subModId),
                isLocked: common_1.LOCKED_MODULES.has(subModId),
                isMultiplayer,
                dependencies,
                invalid: {
                    cyclic: [],
                    missing: [],
                    incompatibleDeps: [],
                },
            };
        }
        catch (err) {
            const errorMessage = 'Vortex was unable to parse: ' + subModFile + ';\n\n'
                + 'You can either inform the mod author and wait for fix, or '
                + 'you can use an online xml validator to find and fix the '
                + 'error yourself.';
            context.api.showErrorNotification('Unable to parse submodule file', errorMessage, { allowReport: false });
            (0, vortex_api_1.log)('error', 'MNB2: parsing error', err);
        }
        return Promise.resolve(accum);
    }, {});
}
async function parseLauncherData() {
    const createDataElement = (xmlNode) => {
        if (xmlNode === undefined) {
            return undefined;
        }
        return {
            subModId: xmlNode?.Id[0],
            enabled: xmlNode?.IsSelected[0] === 'true',
        };
    };
    const launcherData = await (0, util_1.getXMLData)(LAUNCHER_DATA_PATH);
    try {
        const singlePlayerMods = launcherData?.UserData?.SingleplayerData?.[0]?.ModDatas?.[0]?.UserModData || [];
        const multiPlayerMods = launcherData?.UserData?.MultiplayerData?.[0]?.ModDatas?.[0]?.UserModData || [];
        LAUNCHER_DATA.singlePlayerSubMods = singlePlayerMods.reduce((accum, spm) => {
            const dataElement = createDataElement(spm);
            if (!!dataElement) {
                accum.push(dataElement);
            }
            return accum;
        }, []);
        LAUNCHER_DATA.multiplayerSubMods = multiPlayerMods.reduce((accum, mpm) => {
            const dataElement = createDataElement(mpm);
            if (!!dataElement) {
                accum.push(dataElement);
            }
            return accum;
        }, []);
    }
    catch (err) {
        (0, vortex_api_1.log)('error', 'failed to parse launcher data', err);
        LAUNCHER_DATA.singlePlayerSubMods = [
            { subModId: 'Native', enabled: true },
            { subModId: 'SandBoxCore', enabled: true },
            { subModId: 'CustomBattle', enabled: true },
            { subModId: 'Sandbox', enabled: true },
            { subModId: 'StoryMode', enabled: true },
        ];
        LAUNCHER_DATA.multiplayerSubMods = [];
        return Promise.resolve();
    }
}
exports.parseLauncherData = parseLauncherData;
async function getManagedIds(context) {
    const state = context.api.store.getState();
    const activeProfile = vortex_api_1.selectors.activeProfile(state);
    if (activeProfile === undefined) {
        return Promise.resolve([]);
    }
    const modState = state?.persistent?.profiles?.[activeProfile.id]?.modState ?? {};
    const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    const enabledMods = Object.keys(modState)
        .filter(key => !!mods[key] && modState[key].enabled)
        .map(key => mods[key]);
    const invalidMods = [];
    const installationDir = vortex_api_1.selectors.installPathForGame(state, common_1.GAME_ID);
    if (installationDir === undefined) {
        (0, vortex_api_1.log)('error', 'failed to get managed ids', 'undefined staging folder');
        return Promise.resolve([]);
    }
    return bluebird_1.default.reduce(enabledMods, async (accum, entry) => {
        if (entry?.installationPath === undefined) {
            return Promise.resolve(accum);
        }
        const modInstallationPath = path_1.default.join(installationDir, entry.installationPath);
        let files;
        try {
            files = await (0, util_1.walkAsync)(modInstallationPath, 3);
        }
        catch (err) {
            invalidMods.push(entry.id);
            (0, vortex_api_1.log)('error', 'failed to read mod staging folder', { modId: entry.id, error: err.message });
            return Promise.resolve(accum);
        }
        const subModFile = files.find(file => path_1.default.basename(file).toLowerCase() === common_1.SUBMOD_FILE);
        if (subModFile === undefined) {
            return Promise.resolve(accum);
        }
        let subModId;
        try {
            subModId = await (0, util_1.getElementValue)(subModFile, 'Id');
        }
        catch (err) {
            (0, vortex_api_1.log)('error', '[MnB2] Unable to parse submodule file', err);
            return Promise.resolve(accum);
        }
        accum.push({
            subModId,
            subModFile,
            vortexId: entry.id,
        });
        return Promise.resolve(accum);
    }, [])
        .tap((res) => {
        if (invalidMods.length > 0) {
            const errMessage = 'The following mods are inaccessible or are missing '
                + 'in the staging folder:\n\n' + invalidMods.join('\n') + '\n\nPlease ensure '
                + 'these mods and their content are not open in any other application '
                + '(including the game itself). If the mod is missing entirely, please re-install it '
                + 'or remove it from your mods page. Please check your vortex log file for details.';
            context.api.showErrorNotification('Invalid Mods in Staging', new Error(errMessage), { allowReport: false });
        }
        return Promise.resolve(res);
    });
}
function isInvalid(subModId) {
    const cyclicErrors = CACHE[subModId]?.invalid?.cyclic ?? [];
    const missingDeps = CACHE[subModId]?.invalid?.missing ?? [];
    return ((cyclicErrors.length > 0) || (missingDeps.length > 0));
}
exports.isInvalid = isInvalid;
function getValidationInfo(vortexId) {
    const subModId = Object.keys(CACHE).find(key => CACHE[key].vortexId === vortexId);
    const cyclic = CACHE[subModId]?.invalid?.cyclic ?? [];
    const missing = CACHE[subModId]?.invalid?.missing ?? [];
    const incompatible = CACHE[subModId]?.invalid?.incompatibleDeps ?? [];
    return {
        cyclic,
        missing,
        incompatible,
    };
}
exports.getValidationInfo = getValidationInfo;
//# sourceMappingURL=data:application/json;base64,