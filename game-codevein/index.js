"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const loadOrder_1 = require("./loadOrder");
const migrations_1 = require("./migrations");
const util_1 = require("./util");
const STEAM_ID = '678960';
async function findGame() {
    return vortex_api_1.util.GameStoreHelper.findByAppId([STEAM_ID])
        .then(game => game.gamePath);
}
async function externalFilesWarning(api, externalMods) {
    const t = api.translate;
    if (externalMods.length === 0) {
        return Promise.resolve(undefined);
    }
    return new Promise((resolve, reject) => {
        api.showDialog('info', 'External Mod Files Detected', {
            bbcode: t('Vortex has discovered the following unmanaged/external files in the '
                + 'the game\'s mods directory:[br][/br][br][/br]{{files}}'
                + '[br][/br]Please note that the existence of these mods interferes with Vortex\'s '
                + 'load ordering functionality and as such, they should be removed using the same '
                + 'medium through which they have been added.[br][/br][br][/br]'
                + 'Alternatively, Vortex can try to import these files into its mods list which will '
                + 'allow Vortex to take control over them and display them inside the load ordering page. '
                + 'Vortex\'s load ordering functionality will not display external mod entries unless imported!', { replace: { files: externalMods.map(mod => `"${mod}"`).join('[br][/br]') } }),
        }, [
            { label: 'Close', action: () => reject(new vortex_api_1.util.UserCanceled()) },
            { label: 'Import External Mods', action: () => resolve(undefined) },
        ]);
    });
}
async function ImportExternalMods(api, external) {
    const state = api.getState();
    const downloadsPath = vortex_api_1.selectors.downloadPathForGame(state, common_1.GAME_ID);
    const szip = new vortex_api_1.util.SevenZip();
    for (const modFile of external) {
        const archivePath = path_1.default.join(downloadsPath, path_1.default.basename(modFile, common_1.MOD_FILE_EXT) + '.zip');
        try {
            await szip.add(archivePath, [modFile], { raw: ['-r'] });
            await vortex_api_1.fs.removeAsync(modFile);
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
}
async function prepareForModding(context, discovery) {
    const state = context.api.getState();
    const modsPath = path_1.default.join(discovery.path, (0, common_1.modsRelPath)());
    try {
        await vortex_api_1.fs.ensureDirWritableAsync(modsPath);
        const installPath = vortex_api_1.selectors.installPathForGame(state, common_1.GAME_ID);
        const managedFiles = await (0, util_1.getPakFiles)(installPath);
        const deployedFiles = await (0, util_1.getPakFiles)(modsPath);
        const modifier = (filePath) => path_1.default.basename(filePath).toLowerCase();
        const unManagedPredicate = (filePath) => managedFiles.find(managed => modifier(managed) === modifier(filePath)) === undefined;
        const externalMods = deployedFiles.filter(unManagedPredicate);
        try {
            await externalFilesWarning(context.api, externalMods);
            await ImportExternalMods(context.api, externalMods);
        }
        catch (err) {
            if (err instanceof vortex_api_1.util.UserCanceled) {
            }
            else {
                return Promise.reject(err);
            }
        }
    }
    catch (err) {
        return Promise.reject(err);
    }
}
function installContent(files) {
    const modFile = files.find(file => path_1.default.extname(file).toLowerCase() === common_1.MOD_FILE_EXT);
    const idx = modFile.indexOf(path_1.default.basename(modFile));
    const rootPath = path_1.default.dirname(modFile);
    const filtered = files.filter(file => ((file.indexOf(rootPath) !== -1)
        && (!file.endsWith(path_1.default.sep))));
    const instructions = filtered.map(file => {
        return {
            type: 'copy',
            source: file,
            destination: path_1.default.join(file.substr(idx)),
        };
    });
    return Promise.resolve({ instructions });
}
function testSupportedContent(files, gameId) {
    let supported = (gameId === common_1.GAME_ID) &&
        (files.find(file => path_1.default.extname(file).toLowerCase() === common_1.MOD_FILE_EXT) !== undefined);
    if (supported && files.find(file => (path_1.default.basename(file).toLowerCase() === 'moduleconfig.xml')
        && (path_1.default.basename(path_1.default.dirname(file)).toLowerCase() === 'fomod'))) {
        supported = false;
    }
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
function toLOPrefix(context, mod) {
    const props = (0, util_1.genProps)(context);
    if (props === undefined) {
        return 'ZZZZ-' + mod.id;
    }
    const loadOrder = props.state?.persistent?.loadOrder?.[props.profile.id] ?? [];
    const loEntry = loadOrder.find(loEntry => loEntry.id === mod.id);
    return (loEntry?.data?.prefix !== undefined)
        ? loEntry.data.prefix + '-' + mod.id
        : 'ZZZZ-' + mod.id;
}
const localAppData = (() => {
    let cached;
    return () => {
        if (cached === undefined) {
            cached = process.env.LOCALAPPDATA
                || path_1.default.resolve(vortex_api_1.util.getVortexPath('appData'), '..', 'Local');
        }
        return cached;
    };
})();
const EXECUTABLE = path_1.default.join('CodeVein', 'Binaries', 'Win64', 'CodeVein-Win64-Shipping.exe');
function getGameVersion(gamePath) {
    const exeVersion = require('exe-version');
    return bluebird_1.default.resolve(exeVersion.getProductVersionLocalized(path_1.default.join(gamePath, EXECUTABLE)));
}
function main(context) {
    context.registerGame({
        id: common_1.GAME_ID,
        name: 'Code Vein',
        mergeMods: (mod) => toLOPrefix(context, mod),
        queryPath: (0, util_1.toBlue)(findGame),
        requiresCleanup: true,
        supportedTools: [],
        queryModPath: () => (0, common_1.modsRelPath)(),
        logo: 'gameart.jpg',
        executable: () => EXECUTABLE,
        getGameVersion,
        requiredFiles: [
            EXECUTABLE,
        ],
        setup: (0, util_1.toBlue)((discovery) => prepareForModding(context, discovery)),
        environment: {
            SteamAPPId: STEAM_ID,
        },
        details: {
            steamAppId: +STEAM_ID,
            settingsPath: () => path_1.default.join(localAppData(), 'CodeVein', 'Saved', 'Config', 'WindowsNoEditor'),
        },
    });
    context.registerLoadOrder({
        deserializeLoadOrder: () => (0, loadOrder_1.deserialize)(context),
        serializeLoadOrder: (loadOrder) => (0, loadOrder_1.serialize)(context, loadOrder),
        validate: loadOrder_1.validate,
        gameId: common_1.GAME_ID,
        toggleableEntries: false,
        usageInstructions: 'Drag and drop the mods on the left to reorder them. Code Vein loads mods in alphabetic order so Vortex prefixes '
            + 'the directory names with "AAA, AAB, AAC, ..." to ensure they load in the order you set here.',
    });
    context.registerInstaller('codevein-mod', 25, (0, util_1.toBlue)(testSupportedContent), (0, util_1.toBlue)(installContent));
    context.registerMigration((0, util_1.toBlue)(oldVer => (0, migrations_1.migrate100)(context, oldVer)));
    return true;
}
module.exports = {
    default: main,
};
//# sourceMappingURL=data:application/json;base64,