"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.deserialize = exports.serialize = void 0;
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const util_1 = require("./util");
async function serialize(context, loadOrder, profileId) {
    const props = (0, util_1.genProps)(context);
    if (props === undefined) {
        return Promise.reject(new vortex_api_1.util.ProcessCanceled('invalid props'));
    }
    const loFilePath = await (0, util_1.ensureLOFile)(context, profileId, props);
    const filteredLO = loadOrder.filter(lo => props.mods?.[lo?.modId]?.type !== 'collection');
    const prefixedLO = filteredLO.map((loEntry, idx) => {
        const prefix = (0, util_1.makePrefix)(idx);
        const data = {
            prefix,
        };
        return { ...loEntry, data };
    });
    await vortex_api_1.fs.removeAsync(loFilePath).catch({ code: 'ENOENT' }, () => Promise.resolve());
    await vortex_api_1.fs.writeFileAsync(loFilePath, JSON.stringify(prefixedLO), { encoding: 'utf8' });
    return Promise.resolve();
}
exports.serialize = serialize;
async function deserialize(context) {
    const props = (0, util_1.genProps)(context);
    if (props?.profile?.gameId !== common_1.GAME_ID) {
        return [];
    }
    const currentModsState = props.profile?.modState ?? {};
    const enabledModIds = Object.keys(currentModsState).filter((modId) => currentModsState?.[modId]?.enabled);
    const mods = props.state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
    const loFilePath = await (0, util_1.ensureLOFile)(context);
    const fileData = await vortex_api_1.fs.readFileAsync(loFilePath, { encoding: 'utf8' });
    try {
        const data = JSON.parse(fileData);
        const filteredData = data.filter(entry => enabledModIds.includes(entry.id));
        const diff = enabledModIds.filter(id => (mods[id]?.type !== 'collection')
            && (filteredData.find(loEntry => loEntry.id === id) === undefined));
        diff.forEach(missingEntry => {
            filteredData.push({
                id: missingEntry,
                modId: missingEntry,
                enabled: true,
                name: mods[missingEntry] !== undefined
                    ? vortex_api_1.util.renderModName(mods[missingEntry])
                    : missingEntry,
            });
        });
        return filteredData;
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.deserialize = deserialize;
async function validate(prev, current) {
    return undefined;
}
exports.validate = validate;
//# sourceMappingURL=data:application/json;base64,