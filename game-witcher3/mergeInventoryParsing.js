"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNamesOfMergedMods = exports.getMergedModNames = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const xml2js_1 = require("xml2js");
const common_1 = require("./common");
const vortex_api_1 = require("vortex-api");
function getMergeInventory(context) {
    const state = context.api.store.getState();
    const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
    const scriptMerger = discovery?.tools?.[common_1.SCRIPT_MERGER_ID];
    if ((scriptMerger === undefined) || (scriptMerger.path === undefined)) {
        return bluebird_1.default.resolve([]);
    }
    return vortex_api_1.fs.readFileAsync(path_1.default.join(path_1.default.dirname(scriptMerger.path), common_1.MERGE_INV_MANIFEST))
        .then(async (xmlData) => {
        try {
            const mergeData = await (0, xml2js_1.parseStringPromise)(xmlData);
            return Promise.resolve(mergeData);
        }
        catch (err) {
            return Promise.reject(err);
        }
    })
        .catch(err => (err.code === 'ENOENT')
        ? Promise.resolve(undefined)
        : Promise.reject(new vortex_api_1.util.DataInvalid(`Failed to parse ${common_1.MERGE_INV_MANIFEST}: ${err}`)));
}
function getMergedModNames(context) {
    return getMergeInventory(context)
        .then(async (mergeInventory) => {
        if (mergeInventory === undefined) {
            return Promise.resolve([]);
        }
        const state = context.api.getState();
        const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
        const modsPath = path_1.default.join(discovery.path, 'Mods');
        const mergeEntry = mergeInventory?.MergeInventory?.Merge;
        if (mergeEntry === undefined) {
            let inv;
            try {
                inv = JSON.stringify(mergeInventory);
            }
            catch (err) {
                return Promise.reject(err);
            }
            (0, vortex_api_1.log)('debug', 'failed to retrieve merged mod names', inv);
            return Promise.resolve([]);
        }
        const elements = await mergeEntry.reduce(async (accumP, iter) => {
            const accum = await accumP;
            const mergeModName = iter?.MergedModName?.[0];
            if (mergeModName === undefined) {
                return accum;
            }
            if (!accum.includes(mergeModName)) {
                try {
                    await vortex_api_1.fs.statAsync(path_1.default.join(modsPath, mergeModName));
                    accum.push(mergeModName);
                }
                catch (err) {
                    (0, vortex_api_1.log)('debug', 'merged mod is missing', mergeModName);
                }
            }
            return accum;
        }, []);
        return Promise.resolve(elements);
    })
        .catch(err => {
        context.api.showErrorNotification('Invalid MergeInventory.xml file', err, { allowReport: false });
        return Promise.resolve([]);
    });
}
exports.getMergedModNames = getMergedModNames;
function getNamesOfMergedMods(context) {
    return getMergeInventory(context)
        .then(async (mergeInventory) => {
        if (mergeInventory === undefined) {
            return Promise.resolve([]);
        }
        const state = context.api.getState();
        const discovery = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID];
        const modsPath = path_1.default.join(discovery.path, 'Mods');
        const modNames = await mergeInventory.MergeInventory.Merge.reduce(async (accumP, iter) => {
            const accum = await accumP;
            const mergedMods = iter?.IncludedMod;
            for (const modName of mergedMods) {
                if (modName === undefined) {
                    return accum;
                }
                if (!accum.includes(modName?._)) {
                    try {
                        await vortex_api_1.fs.statAsync(path_1.default.join(modsPath, modName?._));
                        accum.push(modName?._);
                    }
                    catch (err) {
                        (0, vortex_api_1.log)('debug', 'merged mod is missing', modName?._);
                    }
                }
            }
            return accum;
        }, []);
        return Promise.resolve(modNames);
    });
}
exports.getNamesOfMergedMods = getNamesOfMergedMods;
//# sourceMappingURL=data:application/json;base64,