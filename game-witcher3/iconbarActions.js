"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerActions = void 0;
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
const PriorityTypeButton_1 = __importDefault(require("./views/PriorityTypeButton"));
const mergeBackup_1 = require("./mergeBackup");
function resetPriorities(props) {
    const { context, refreshFunc } = props;
    const state = context.api.getState();
    const profile = vortex_api_1.selectors.activeProfile(state);
    const loadOrder = state?.persistent?.loadOrder?.[profile.id] ?? {};
    const newLO = Object.keys(loadOrder).reduce((accum, key) => {
        const loEntry = loadOrder[key];
        accum[key] = {
            ...loEntry,
            prefix: loEntry.pos + 1,
        };
        return accum;
    }, {});
    context.api.store.dispatch(vortex_api_1.actions.setLoadOrder(profile.id, newLO));
    if (refreshFunc !== undefined) {
        refreshFunc();
    }
    return newLO;
}
const registerActions = (props) => {
    const { context, refreshFunc, getModLimitPatcher } = props;
    const openTW3DocPath = () => {
        const docPath = path_1.default.join(vortex_api_1.util.getVortexPath('documents'), 'The Witcher 3');
        vortex_api_1.util.opn(docPath).catch(() => null);
    };
    const isTW3 = (gameId = undefined) => {
        if (gameId !== undefined) {
            return (gameId === common_1.GAME_ID);
        }
        const state = context.api.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return (gameMode === common_1.GAME_ID);
    };
    context.registerAction('mods-action-icons', 300, 'start-install', {}, 'Import Script Merges', instanceIds => { (0, mergeBackup_1.makeOnContextImport)(context, instanceIds[0]); }, instanceIds => {
        const state = context.api.getState();
        const mods = state?.persistent?.mods?.[common_1.GAME_ID] ?? {};
        if (mods[instanceIds?.[0]]?.type !== 'collection') {
            return false;
        }
        const activeGameId = vortex_api_1.selectors.activeGameId(state);
        return activeGameId === common_1.GAME_ID;
    });
    context.registerAction('mod-icons', 500, 'savegame', {}, 'Apply Mod Limit Patch', () => {
        getModLimitPatcher().ensureModLimitPatch()
            .catch(err => {
            context.api.showErrorNotification('Failed to apply patch', err, {
                allowReport: (err instanceof vortex_api_1.util.ProcessCanceled),
            });
        });
    }, () => vortex_api_1.selectors.activeGameId(context.api.getState()) === common_1.GAME_ID);
    context.registerAction('generic-load-order-icons', 300, PriorityTypeButton_1.default, {}, undefined, isTW3);
    context.registerAction('mod-icons', 300, 'open-ext', {}, 'Open TW3 Documents Folder', openTW3DocPath, isTW3);
    context.registerAction('generic-load-order-icons', 300, 'open-ext', {}, 'Open TW3 Documents Folder', openTW3DocPath, isTW3);
    context.registerAction('generic-load-order-icons', 100, 'loot-sort', {}, 'Reset Priorities', () => {
        context.api.showDialog('info', 'Reset Priorities', {
            bbcode: context.api.translate('This action will revert all manually set priorities and will re-instate priorities in an incremental '
                + 'manner starting from 1. Are you sure you want to do this ?', { ns: common_1.I18N_NAMESPACE }),
        }, [
            { label: 'Cancel', action: () => {
                    return;
                } },
            { label: 'Reset Priorities', action: () => resetPriorities(props) },
        ]);
    }, () => {
        const state = context.api.store.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return gameMode === common_1.GAME_ID;
    });
    context.registerAction('generic-load-order-icons', 100, 'loot-sort', {}, 'Sort by Deploy Order', () => {
        context.api.showDialog('info', 'Sort by Deployment Order', {
            bbcode: context.api.translate('This action will set priorities using the deployment rules '
                + 'defined in the mods page. Are you sure you wish to proceed ?[br][/br][br][/br]'
                + 'Please be aware that any externally added mods (added manually or by other tools) will be pushed '
                + 'to the bottom of the list, while all mods that have been installed through Vortex will shift '
                + 'in position to match the deploy order!', { ns: common_1.I18N_NAMESPACE }),
        }, [
            { label: 'Cancel', action: () => {
                    return;
                } },
            { label: 'Sort by Deploy Order', action: () => {
                    const state = context.api.getState();
                    const gameMods = state.persistent.mods[common_1.GAME_ID] || {};
                    const profile = vortex_api_1.selectors.activeProfile(state);
                    const mods = Object.keys(gameMods)
                        .filter(key => profile?.modState?.[key]?.enabled ?? false)
                        .map(key => gameMods[key]);
                    return vortex_api_1.util.sortMods(common_1.GAME_ID, mods, context.api)
                        .then(sorted => {
                        const loadOrder = state?.persistent?.loadOrder?.[profile.id] ?? {};
                        const filtered = Object.keys(loadOrder).filter(key => sorted.find(mod => mod.id === key) !== undefined);
                        const manuallyAdded = Object.keys(loadOrder).filter(key => !filtered.includes(key));
                        const minimumIdx = manuallyAdded
                            .filter(key => key.includes(common_1.LOCKED_PREFIX))
                            .reduce((min, key) => {
                            if (min <= loadOrder[key].pos) {
                                min = loadOrder[key].pos + 1;
                            }
                            return min;
                        }, 0);
                        const manualLO = manuallyAdded.reduce((accum, key, idx) => {
                            if (key.includes(common_1.LOCKED_PREFIX)) {
                                accum[key] = loadOrder[key];
                                return accum;
                            }
                            const minimumPosition = (filtered.length + minimumIdx + 1);
                            if (loadOrder[key].pos < minimumPosition) {
                                accum[key] = {
                                    ...loadOrder[key],
                                    pos: loadOrder[key].pos + (minimumPosition + idx),
                                    prefix: loadOrder[key].pos + (minimumPosition + idx + 1),
                                };
                                return accum;
                            }
                            else {
                                accum[key] = loadOrder[key];
                                return accum;
                            }
                        }, {});
                        const newLO = filtered.reduce((accum, key) => {
                            const loEntry = loadOrder[key];
                            const idx = sorted.findIndex(mod => mod.id === key);
                            const assignedIdx = minimumIdx + idx;
                            accum[key] = {
                                ...loEntry,
                                pos: assignedIdx,
                                prefix: assignedIdx + 1,
                            };
                            return accum;
                        }, manualLO);
                        context.api.store.dispatch(vortex_api_1.actions.setLoadOrder(profile.id, newLO));
                        if (refreshFunc !== undefined) {
                            refreshFunc();
                        }
                    })
                        .catch(err => {
                        const allowReport = !(err instanceof vortex_api_1.util.CycleError);
                        context.api.showErrorNotification('Failed to sort by deployment order', err, { allowReport });
                    });
                } },
        ]);
    }, () => {
        const state = context.api.store.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return gameMode === common_1.GAME_ID;
    });
};
exports.registerActions = registerActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbmJhckFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpY29uYmFyQWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsMkNBQWlFO0FBR2pFLHFDQUF5RjtBQUd6RixvRkFBNEQ7QUFJNUQsK0NBQW9EO0FBVXBELFNBQVMsZUFBZSxDQUFDLEtBQWE7SUFDcEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDdkMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyQyxNQUFNLE9BQU8sR0FBRyxzQkFBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbkUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDekQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRztZQUNYLEdBQUcsT0FBTztZQUNWLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDeEIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLG9CQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsS0FBWSxDQUFDLENBQUMsQ0FBQztJQUMzRSxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7UUFDN0IsV0FBVyxF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LENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEtBQVksQ0FBQyxDQUFDLENBQUM7d0JBQzNFLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTs0QkFDN0IsV0FBVyxFQUFFLENBQUM7eUJBQ2Y7b0JBQ0gsQ0FBQyxDQUFDO3lCQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFDWCxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxZQUFZLGlCQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUN6RSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7b0JBQ3JCLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsRUFBQztTQUNILENBQUMsQ0FBQztJQUNMLENBQUMsRUFBRSxHQUFHLEVBQUU7UUFDTixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQyxNQUFNLFFBQVEsR0FBRyxzQkFBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxPQUFPLFFBQVEsS0FBSyxnQkFBTyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBaEpXLFFBQUEsZUFBZSxtQkFnSjFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBhY3Rpb25zLCBmcywgc2VsZWN0b3JzLCB0eXBlcywgdXRpbCB9IGZyb20gJ3ZvcnRleC1hcGknO1xuXG5pbXBvcnQgeyBzZXRQcmlvcml0eVR5cGUgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgR0FNRV9JRCwgZ2V0UHJpb3JpdHlUeXBlQnJhbmNoLCBJMThOX05BTUVTUEFDRSwgTE9DS0VEX1BSRUZJWCB9IGZyb20gJy4vY29tbW9uJztcbmltcG9ydCB7IFByaW9yaXR5TWFuYWdlciwgUHJpb3JpdHlUeXBlIH0gZnJvbSAnLi9wcmlvcml0eU1hbmFnZXInO1xuXG5pbXBvcnQgUHJpb3JpdHlUeXBlQnV0dG9uIGZyb20gJy4vdmlld3MvUHJpb3JpdHlUeXBlQnV0dG9uJztcblxuaW1wb3J0IHsgZXhwb3J0TWVudU1vZCwgaW1wb3J0TWVudU1vZCB9IGZyb20gJy4vbWVudW1vZCc7XG5cbmltcG9ydCB7IG1ha2VPbkNvbnRleHRJbXBvcnQgfSBmcm9tICcuL21lcmdlQmFja3VwJztcbmltcG9ydCB7IE1vZExpbWl0UGF0Y2hlciB9IGZyb20gJy4vbW9kTGltaXRQYXRjaCc7XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICBjb250ZXh0OiB0eXBlcy5JRXh0ZW5zaW9uQ29udGV4dDtcbiAgcmVmcmVzaEZ1bmM6ICgpID0+IHZvaWQ7XG4gIGdldFByaW9yaXR5TWFuYWdlcjogKCkgPT4gUHJpb3JpdHlNYW5hZ2VyO1xuICBnZXRNb2RMaW1pdFBhdGNoZXI6ICgpID0+IE1vZExpbWl0UGF0Y2hlcjtcbn1cblxuZnVuY3Rpb24gcmVzZXRQcmlvcml0aWVzKHByb3BzOiBJUHJvcHMpIHtcbiAgY29uc3QgeyBjb250ZXh0LCByZWZyZXNoRnVuYyB9ID0gcHJvcHM7XG4gIGNvbnN0IHN0YXRlID0gY29udGV4dC5hcGkuZ2V0U3RhdGUoKTtcbiAgY29uc3QgcHJvZmlsZSA9IHNlbGVjdG9ycy5hY3RpdmVQcm9maWxlKHN0YXRlKTtcbiAgY29uc3QgbG9hZE9yZGVyID0gc3RhdGU/LnBlcnNpc3RlbnQ/LmxvYWRPcmRlcj8uW3Byb2ZpbGUuaWRdID8/IHt9O1xuICBjb25zdCBuZXdMTyA9IE9iamVjdC5rZXlzKGxvYWRPcmRlcikucmVkdWNlKChhY2N1bSwga2V5KSA9PiB7XG4gICAgY29uc3QgbG9FbnRyeSA9IGxvYWRPcmRlcltrZXldO1xuICAgIGFjY3VtW2tleV0gPSB7XG4gICAgICAuLi5sb0VudHJ5LFxuICAgICAgcHJlZml4OiBsb0VudHJ5LnBvcyArIDEsXG4gICAgfTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH0sIHt9KTtcbiAgY29udGV4dC5hcGkuc3RvcmUuZGlzcGF0Y2goYWN0aW9ucy5zZXRMb2FkT3JkZXIocHJvZmlsZS5pZCwgbmV3TE8gYXMgYW55KSk7XG4gIGlmIChyZWZyZXNoRnVuYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVmcmVzaEZ1bmMoKTtcbiAgfVxuICByZXR1cm4gbmV3TE87XG59XG5cbmV4cG9ydCBjb25zdCByZWdpc3RlckFjdGlvbnMgPSAocHJvcHM6IElQcm9wcykgPT4ge1xuICBjb25zdCB7IGNvbnRleHQsIHJlZnJlc2hGdW5jLCBnZXRNb2RMaW1pdFBhdGNoZXIgfSA9IHByb3BzO1xuICBjb25zdCBvcGVuVFczRG9jUGF0aCA9ICgpID0+IHtcbiAgICBjb25zdCBkb2NQYXRoID0gcGF0aC5qb2luKHV0aWwuZ2V0Vm9ydGV4UGF0aCgnZG9jdW1lbnRzJyksICdUaGUgV2l0Y2hlciAzJyk7XG4gICAgdXRpbC5vcG4oZG9jUGF0aCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gIH07XG5cbiAgY29uc3QgaXNUVzMgPSAoZ2FtZUlkID0gdW5kZWZpbmVkKSA9PiB7XG4gICAgaWYgKGdhbWVJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gKGdhbWVJZCA9PT0gR0FNRV9JRCk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXRlID0gY29udGV4dC5hcGkuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBnYW1lTW9kZSA9IHNlbGVjdG9ycy5hY3RpdmVHYW1lSWQoc3RhdGUpO1xuICAgIHJldHVybiAoZ2FtZU1vZGUgPT09IEdBTUVfSUQpO1xuICB9O1xuXG4gIGNvbnRleHQucmVnaXN0ZXJBY3Rpb24oJ21vZHMtYWN0aW9uLWljb25zJywgMzAwLCAnc3RhcnQtaW5zdGFsbCcsIHt9LCAnSW1wb3J0IFNjcmlwdCBNZXJnZXMnLFxuICAgIGluc3RhbmNlSWRzID0+IHsgbWFrZU9uQ29udGV4dEltcG9ydChjb250ZXh0LCBpbnN0YW5jZUlkc1swXSk7IH0sXG4gICAgaW5zdGFuY2VJZHMgPT4ge1xuICAgICAgY29uc3Qgc3RhdGUgPSBjb250ZXh0LmFwaS5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3QgbW9kcyA9IHN0YXRlPy5wZXJzaXN0ZW50Py5tb2RzPy5bR0FNRV9JRF0gPz8ge307XG4gICAgICBpZiAobW9kc1tpbnN0YW5jZUlkcz8uWzBdXT8udHlwZSAhPT0gJ2NvbGxlY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFjdGl2ZUdhbWVJZCA9IHNlbGVjdG9ycy5hY3RpdmVHYW1lSWQoc3RhdGUpO1xuICAgICAgcmV0dXJuIGFjdGl2ZUdhbWVJZCA9PT0gR0FNRV9JRDtcbiAgICB9KTtcblxuICBjb250ZXh0LnJlZ2lzdGVyQWN0aW9uKCdtb2QtaWNvbnMnLCA1MDAsICdzYXZlZ2FtZScsIHt9LCAnQXBwbHkgTW9kIExpbWl0IFBhdGNoJywgKCkgPT4ge1xuICAgIGdldE1vZExpbWl0UGF0Y2hlcigpLmVuc3VyZU1vZExpbWl0UGF0Y2goKVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGNvbnRleHQuYXBpLnNob3dFcnJvck5vdGlmaWNhdGlvbignRmFpbGVkIHRvIGFwcGx5IHBhdGNoJywgZXJyLCB7XG4gICAgICAgICAgYWxsb3dSZXBvcnQ6IChlcnIgaW5zdGFuY2VvZiB1dGlsLlByb2Nlc3NDYW5jZWxlZCksXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH0sICgpID0+IHNlbGVjdG9ycy5hY3RpdmVHYW1lSWQoY29udGV4dC5hcGkuZ2V0U3RhdGUoKSkgPT09IEdBTUVfSUQpO1xuXG4gIGNvbnRleHQucmVnaXN0ZXJBY3Rpb24oJ2dlbmVyaWMtbG9hZC1vcmRlci1pY29ucycsIDMwMCwgUHJpb3JpdHlUeXBlQnV0dG9uLCB7fSxcbiAgICB1bmRlZmluZWQsIGlzVFczKTtcblxuICBjb250ZXh0LnJlZ2lzdGVyQWN0aW9uKCdtb2QtaWNvbnMnLCAzMDAsICdvcGVuLWV4dCcsIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICdPcGVuIFRXMyBEb2N1bWVudHMgRm9sZGVyJywgb3BlblRXM0RvY1BhdGgsIGlzVFczKTtcblxuICBjb250ZXh0LnJlZ2lzdGVyQWN0aW9uKCdnZW5lcmljLWxvYWQtb3JkZXItaWNvbnMnLCAzMDAsICdvcGVuLWV4dCcsIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICdPcGVuIFRXMyBEb2N1bWVudHMgRm9sZGVyJywgb3BlblRXM0RvY1BhdGgsIGlzVFczKTtcblxuICBjb250ZXh0LnJlZ2lzdGVyQWN0aW9uKCdnZW5lcmljLWxvYWQtb3JkZXItaWNvbnMnLCAxMDAsICdsb290LXNvcnQnLCB7fSwgJ1Jlc2V0IFByaW9yaXRpZXMnLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnRleHQuYXBpLnNob3dEaWFsb2coJ2luZm8nLCAnUmVzZXQgUHJpb3JpdGllcycsIHtcbiAgICAgICAgYmJjb2RlOiBjb250ZXh0LmFwaS50cmFuc2xhdGUoJ1RoaXMgYWN0aW9uIHdpbGwgcmV2ZXJ0IGFsbCBtYW51YWxseSBzZXQgcHJpb3JpdGllcyBhbmQgd2lsbCByZS1pbnN0YXRlIHByaW9yaXRpZXMgaW4gYW4gaW5jcmVtZW50YWwgJ1xuICAgICAgICAgICsgJ21hbm5lciBzdGFydGluZyBmcm9tIDEuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkbyB0aGlzID8nLCB7IG5zOiBJMThOX05BTUVTUEFDRSB9KSxcbiAgICAgIH0sIFtcbiAgICAgICAgeyBsYWJlbDogJ0NhbmNlbCcsIGFjdGlvbjogKCkgPT4ge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfX0sXG4gICAgICAgIHsgbGFiZWw6ICdSZXNldCBQcmlvcml0aWVzJywgYWN0aW9uOiAoKSA9PiByZXNldFByaW9yaXRpZXMocHJvcHMpIH0sXG4gICAgICBdKTtcbiAgICB9LCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IGNvbnRleHQuYXBpLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBjb25zdCBnYW1lTW9kZSA9IHNlbGVjdG9ycy5hY3RpdmVHYW1lSWQoc3RhdGUpO1xuICAgICAgcmV0dXJuIGdhbWVNb2RlID09PSBHQU1FX0lEO1xuICAgIH0pO1xuXG4gIGNvbnRleHQucmVnaXN0ZXJBY3Rpb24oJ2dlbmVyaWMtbG9hZC1vcmRlci1pY29ucycsIDEwMCwgJ2xvb3Qtc29ydCcsIHt9LCAnU29ydCBieSBEZXBsb3kgT3JkZXInLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnRleHQuYXBpLnNob3dEaWFsb2coJ2luZm8nLCAnU29ydCBieSBEZXBsb3ltZW50IE9yZGVyJywge1xuICAgICAgICBiYmNvZGU6IGNvbnRleHQuYXBpLnRyYW5zbGF0ZSgnVGhpcyBhY3Rpb24gd2lsbCBzZXQgcHJpb3JpdGllcyB1c2luZyB0aGUgZGVwbG95bWVudCBydWxlcyAnXG4gICAgICAgICAgKyAnZGVmaW5lZCBpbiB0aGUgbW9kcyBwYWdlLiBBcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gcHJvY2VlZCA/W2JyXVsvYnJdW2JyXVsvYnJdJ1xuICAgICAgICAgICsgJ1BsZWFzZSBiZSBhd2FyZSB0aGF0IGFueSBleHRlcm5hbGx5IGFkZGVkIG1vZHMgKGFkZGVkIG1hbnVhbGx5IG9yIGJ5IG90aGVyIHRvb2xzKSB3aWxsIGJlIHB1c2hlZCAnXG4gICAgICAgICAgKyAndG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCwgd2hpbGUgYWxsIG1vZHMgdGhhdCBoYXZlIGJlZW4gaW5zdGFsbGVkIHRocm91Z2ggVm9ydGV4IHdpbGwgc2hpZnQgJ1xuICAgICAgICAgICsgJ2luIHBvc2l0aW9uIHRvIG1hdGNoIHRoZSBkZXBsb3kgb3JkZXIhJywgeyBuczogSTE4Tl9OQU1FU1BBQ0UgfSksXG4gICAgICB9LCBbXG4gICAgICAgIHsgbGFiZWw6ICdDYW5jZWwnLCBhY3Rpb246ICgpID0+IHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH19LFxuICAgICAgICB7IGxhYmVsOiAnU29ydCBieSBEZXBsb3kgT3JkZXInLCBhY3Rpb246ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IGNvbnRleHQuYXBpLmdldFN0YXRlKCk7XG4gICAgICAgICAgY29uc3QgZ2FtZU1vZHMgPSBzdGF0ZS5wZXJzaXN0ZW50Lm1vZHNbR0FNRV9JRF0gfHwge307XG4gICAgICAgICAgY29uc3QgcHJvZmlsZSA9IHNlbGVjdG9ycy5hY3RpdmVQcm9maWxlKHN0YXRlKTtcbiAgICAgICAgICBjb25zdCBtb2RzID0gT2JqZWN0LmtleXMoZ2FtZU1vZHMpXG4gICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBwcm9maWxlPy5tb2RTdGF0ZT8uW2tleV0/LmVuYWJsZWQgPz8gZmFsc2UpXG4gICAgICAgICAgICAubWFwKGtleSA9PiBnYW1lTW9kc1trZXldKTtcbiAgICAgICAgICByZXR1cm4gdXRpbC5zb3J0TW9kcyhHQU1FX0lELCBtb2RzLCBjb250ZXh0LmFwaSlcbiAgICAgICAgICAgIC50aGVuKHNvcnRlZCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGxvYWRPcmRlciA9IHN0YXRlPy5wZXJzaXN0ZW50Py5sb2FkT3JkZXI/Lltwcm9maWxlLmlkXSA/PyB7fTtcbiAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhsb2FkT3JkZXIpLmZpbHRlcihrZXkgPT5cbiAgICAgICAgICAgICAgICBzb3J0ZWQuZmluZChtb2QgPT4gbW9kLmlkID09PSBrZXkpICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICBjb25zdCBtYW51YWxseUFkZGVkID0gT2JqZWN0LmtleXMobG9hZE9yZGVyKS5maWx0ZXIoa2V5ID0+ICFmaWx0ZXJlZC5pbmNsdWRlcyhrZXkpKTtcbiAgICAgICAgICAgICAgY29uc3QgbWluaW11bUlkeCA9IG1hbnVhbGx5QWRkZWRcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkuaW5jbHVkZXMoTE9DS0VEX1BSRUZJWCkpXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgobWluLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChtaW4gPD0gbG9hZE9yZGVyW2tleV0ucG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGxvYWRPcmRlcltrZXldLnBvcyArIDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICBjb25zdCBtYW51YWxMTyA9IG1hbnVhbGx5QWRkZWQucmVkdWNlKChhY2N1bSwga2V5LCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmluY2x1ZGVzKExPQ0tFRF9QUkVGSVgpKSB7XG4gICAgICAgICAgICAgICAgICBhY2N1bVtrZXldID0gbG9hZE9yZGVyW2tleV07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbWluaW11bVBvc2l0aW9uID0gKGZpbHRlcmVkLmxlbmd0aCArIG1pbmltdW1JZHggKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAobG9hZE9yZGVyW2tleV0ucG9zIDwgbWluaW11bVBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBhY2N1bVtrZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5sb2FkT3JkZXJba2V5XSxcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBsb2FkT3JkZXJba2V5XS5wb3MgKyAobWluaW11bVBvc2l0aW9uICsgaWR4KSxcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiBsb2FkT3JkZXJba2V5XS5wb3MgKyAobWluaW11bVBvc2l0aW9uICsgaWR4ICsgMSksXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBhY2N1bVtrZXldID0gbG9hZE9yZGVyW2tleV07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld0xPID0gZmlsdGVyZWQucmVkdWNlKChhY2N1bSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9FbnRyeSA9IGxvYWRPcmRlcltrZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IHNvcnRlZC5maW5kSW5kZXgobW9kID0+IG1vZC5pZCA9PT0ga2V5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBhc3NpZ25lZElkeCA9IG1pbmltdW1JZHggKyBpZHg7XG4gICAgICAgICAgICAgICAgYWNjdW1ba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgIC4uLmxvRW50cnksXG4gICAgICAgICAgICAgICAgICBwb3M6IGFzc2lnbmVkSWR4LFxuICAgICAgICAgICAgICAgICAgcHJlZml4OiBhc3NpZ25lZElkeCArIDEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgICAgICAgIH0sIG1hbnVhbExPKTtcblxuICAgICAgICAgICAgICBjb250ZXh0LmFwaS5zdG9yZS5kaXNwYXRjaChhY3Rpb25zLnNldExvYWRPcmRlcihwcm9maWxlLmlkLCBuZXdMTyBhcyBhbnkpKTtcbiAgICAgICAgICAgICAgaWYgKHJlZnJlc2hGdW5jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZWZyZXNoRnVuYygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGFsbG93UmVwb3J0ID0gIShlcnIgaW5zdGFuY2VvZiB1dGlsLkN5Y2xlRXJyb3IpO1xuICAgICAgICAgICAgICBjb250ZXh0LmFwaS5zaG93RXJyb3JOb3RpZmljYXRpb24oJ0ZhaWxlZCB0byBzb3J0IGJ5IGRlcGxveW1lbnQgb3JkZXInLCBlcnIsXG4gICAgICAgICAgICAgICAgeyBhbGxvd1JlcG9ydCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9fSxcbiAgICAgIF0pO1xuICAgIH0sICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gY29udGV4dC5hcGkuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIGNvbnN0IGdhbWVNb2RlID0gc2VsZWN0b3JzLmFjdGl2ZUdhbWVJZChzdGF0ZSk7XG4gICAgICByZXR1cm4gZ2FtZU1vZGUgPT09IEdBTUVfSUQ7XG4gICAgfSk7XG59O1xuIl19