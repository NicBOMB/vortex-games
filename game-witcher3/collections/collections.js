"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCollectionsData = exports.genCollectionsData = void 0;
const vortex_api_1 = require("vortex-api");
const common_1 = require("../common");
const loadOrder_1 = require("./loadOrder");
const menumod_1 = require("../menumod");
const mergeBackup_1 = require("../mergeBackup");
const scriptmerger_1 = require("../scriptmerger");
const util_1 = require("./util");
async function genCollectionsData(context, gameId, includedMods, collection) {
    const api = context.api;
    const state = api.getState();
    const profile = vortex_api_1.selectors.activeProfile(state);
    const mods = state?.persistent?.mods?.[gameId] ?? {};
    try {
        const loadOrder = await (0, loadOrder_1.exportLoadOrder)(api.getState(), includedMods, mods);
        const menuModData = await (0, menumod_1.exportMenuMod)(api, profile, includedMods);
        const scriptMergerTool = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID]?.tools?.[common_1.SCRIPT_MERGER_ID];
        let scriptMergesData;
        if (scriptMergerTool !== undefined) {
            scriptMergesData = await (0, mergeBackup_1.exportScriptMerges)(context, profile.id, includedMods, collection);
        }
        const mergedData = {
            menuModSettingsData: (menuModData !== undefined)
                ? menuModData.toString('hex')
                : undefined,
            scriptMergedData: scriptMergesData !== undefined
                ? scriptMergesData.toString('hex')
                : undefined,
        };
        const collectionData = {
            loadOrder,
            mergedData,
        };
        return Promise.resolve(collectionData);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.genCollectionsData = genCollectionsData;
async function parseCollectionsData(context, gameId, collection) {
    const api = context.api;
    const state = api.getState();
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, gameId);
    const profile = vortex_api_1.selectors.profileById(state, profileId);
    if (profile?.gameId !== gameId) {
        const collectionName = collection['info']?.['name'] !== undefined ? collection['info']['name'] : 'Witcher 3 Collection';
        return Promise.reject(new util_1.CollectionParseError(collectionName, 'Last active profile is missing'));
    }
    const { menuModSettingsData, scriptMergedData } = collection.mergedData;
    try {
        await (0, loadOrder_1.importLoadOrder)(api, collection);
        if (menuModSettingsData !== undefined) {
            await (0, menumod_1.importMenuMod)(api, profile, (0, util_1.hex2Buffer)(menuModSettingsData));
        }
        if (scriptMergedData !== undefined) {
            const scriptMergerTool = state?.settings?.gameMode?.discovered?.[common_1.GAME_ID]?.tools?.[common_1.SCRIPT_MERGER_ID];
            if (scriptMergerTool === undefined) {
                await (0, scriptmerger_1.downloadScriptMerger)(context);
            }
            await (0, mergeBackup_1.importScriptMerges)(context, profile.id, (0, util_1.hex2Buffer)(scriptMergedData));
        }
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.parseCollectionsData = parseCollectionsData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBOEM7QUFFOUMsc0NBQXNEO0FBSXRELDJDQUErRDtBQUUvRCx3Q0FBMEQ7QUFDMUQsZ0RBQXdFO0FBRXhFLGtEQUF1RDtBQUV2RCxpQ0FBMEQ7QUFFbkQsS0FBSyxVQUFVLGtCQUFrQixDQUN0QyxPQUFnQyxFQUNoQyxNQUFjLEVBQ2QsWUFBc0IsRUFDdEIsVUFBc0I7SUFFdEIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUN4QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsTUFBTSxPQUFPLEdBQUcsc0JBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckQsSUFBSTtRQUNGLE1BQU0sU0FBUyxHQUFlLE1BQU0sSUFBQSwyQkFBZSxFQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEYsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLHVCQUFhLEVBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNwRSxNQUFNLGdCQUFnQixHQUFHLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLGdCQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyx5QkFBZ0IsQ0FBQyxDQUFDO1FBQ3JHLElBQUksZ0JBQWdCLENBQUM7UUFDckIsSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7WUFDbEMsZ0JBQWdCLEdBQUcsTUFBTSxJQUFBLGdDQUFrQixFQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztTQUM1RjtRQUNELE1BQU0sVUFBVSxHQUFrQjtZQUNoQyxtQkFBbUIsRUFBRSxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUM7Z0JBQzlDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFDN0IsQ0FBQyxDQUFDLFNBQVM7WUFDYixnQkFBZ0IsRUFBRSxnQkFBZ0IsS0FBSyxTQUFTO2dCQUM5QyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLFNBQVM7U0FDZCxDQUFDO1FBQ0YsTUFBTSxjQUFjLEdBQXVCO1lBQ3pDLFNBQVM7WUFDVCxVQUFVO1NBQ1gsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUN4QztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzVCO0FBQ0gsQ0FBQztBQWxDRCxnREFrQ0M7QUFFTSxLQUFLLFVBQVUsb0JBQW9CLENBQUMsT0FBZ0MsRUFDaEMsTUFBYyxFQUNkLFVBQThCO0lBQ3ZFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDeEIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLE1BQU0sU0FBUyxHQUFHLHNCQUFTLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sT0FBTyxHQUFHLHNCQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxJQUFJLE9BQU8sRUFBRSxNQUFNLEtBQUssTUFBTSxFQUFFO1FBQzlCLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztRQUN4SCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSwyQkFBb0IsQ0FBQyxjQUFjLEVBQzNELGdDQUFnQyxDQUFDLENBQUMsQ0FBQztLQUN0QztJQUNELE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDeEUsSUFBSTtRQUNGLE1BQU0sSUFBQSwyQkFBZSxFQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN2QyxJQUFJLG1CQUFtQixLQUFLLFNBQVMsRUFBRTtZQUNyQyxNQUFNLElBQUEsdUJBQWEsRUFBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUEsaUJBQVUsRUFBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtZQUVsQyxNQUFNLGdCQUFnQixHQUFHLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLGdCQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyx5QkFBZ0IsQ0FBQyxDQUFDO1lBQ3JHLElBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO2dCQUNsQyxNQUFNLElBQUEsbUNBQW9CLEVBQUMsT0FBTyxDQUFDLENBQUM7YUFDckM7WUFDRCxNQUFNLElBQUEsZ0NBQWtCLEVBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBQSxpQkFBVSxFQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztTQUM3RTtLQUNGO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBOUJELG9EQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdG9ycywgdHlwZXMgfSBmcm9tICd2b3J0ZXgtYXBpJztcblxuaW1wb3J0IHsgR0FNRV9JRCwgU0NSSVBUX01FUkdFUl9JRCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmltcG9ydCB7IElMb2FkT3JkZXIsIElXM0NvbGxlY3Rpb25zRGF0YSwgSVczTWVyZ2VkRGF0YSB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgeyBleHBvcnRMb2FkT3JkZXIsIGltcG9ydExvYWRPcmRlciB9IGZyb20gJy4vbG9hZE9yZGVyJztcblxuaW1wb3J0IHsgZXhwb3J0TWVudU1vZCwgaW1wb3J0TWVudU1vZCB9IGZyb20gJy4uL21lbnVtb2QnO1xuaW1wb3J0IHsgZXhwb3J0U2NyaXB0TWVyZ2VzLCBpbXBvcnRTY3JpcHRNZXJnZXMgfSBmcm9tICcuLi9tZXJnZUJhY2t1cCc7XG5cbmltcG9ydCB7IGRvd25sb2FkU2NyaXB0TWVyZ2VyIH0gZnJvbSAnLi4vc2NyaXB0bWVyZ2VyJztcblxuaW1wb3J0IHsgQ29sbGVjdGlvblBhcnNlRXJyb3IsIGhleDJCdWZmZXIgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuQ29sbGVjdGlvbnNEYXRhKFxuICBjb250ZXh0OiB0eXBlcy5JRXh0ZW5zaW9uQ29udGV4dCxcbiAgZ2FtZUlkOiBzdHJpbmcsXG4gIGluY2x1ZGVkTW9kczogc3RyaW5nW10sXG4gIGNvbGxlY3Rpb246IHR5cGVzLklNb2Rcbil7XG4gIGNvbnN0IGFwaSA9IGNvbnRleHQuYXBpO1xuICBjb25zdCBzdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICBjb25zdCBwcm9maWxlID0gc2VsZWN0b3JzLmFjdGl2ZVByb2ZpbGUoc3RhdGUpO1xuICBjb25zdCBtb2RzID0gc3RhdGU/LnBlcnNpc3RlbnQ/Lm1vZHM/LltnYW1lSWRdID8/IHt9O1xuICB0cnkge1xuICAgIGNvbnN0IGxvYWRPcmRlcjogSUxvYWRPcmRlciA9IGF3YWl0IGV4cG9ydExvYWRPcmRlcihhcGkuZ2V0U3RhdGUoKSwgaW5jbHVkZWRNb2RzLCBtb2RzKTtcbiAgICBjb25zdCBtZW51TW9kRGF0YSA9IGF3YWl0IGV4cG9ydE1lbnVNb2QoYXBpLCBwcm9maWxlLCBpbmNsdWRlZE1vZHMpO1xuICAgIGNvbnN0IHNjcmlwdE1lcmdlclRvb2wgPSBzdGF0ZT8uc2V0dGluZ3M/LmdhbWVNb2RlPy5kaXNjb3ZlcmVkPy5bR0FNRV9JRF0/LnRvb2xzPy5bU0NSSVBUX01FUkdFUl9JRF07XG4gICAgbGV0IHNjcmlwdE1lcmdlc0RhdGE7XG4gICAgaWYgKHNjcmlwdE1lcmdlclRvb2wgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2NyaXB0TWVyZ2VzRGF0YSA9IGF3YWl0IGV4cG9ydFNjcmlwdE1lcmdlcyhjb250ZXh0LCBwcm9maWxlLmlkLCBpbmNsdWRlZE1vZHMsIGNvbGxlY3Rpb24pO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWREYXRhOiBJVzNNZXJnZWREYXRhID0ge1xuICAgICAgbWVudU1vZFNldHRpbmdzRGF0YTogKG1lbnVNb2REYXRhICE9PSB1bmRlZmluZWQpXG4gICAgICAgID8gbWVudU1vZERhdGEudG9TdHJpbmcoJ2hleCcpXG4gICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgc2NyaXB0TWVyZ2VkRGF0YTogc2NyaXB0TWVyZ2VzRGF0YSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc2NyaXB0TWVyZ2VzRGF0YS50b1N0cmluZygnaGV4JylcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBjb25zdCBjb2xsZWN0aW9uRGF0YTogSVczQ29sbGVjdGlvbnNEYXRhID0ge1xuICAgICAgbG9hZE9yZGVyLFxuICAgICAgbWVyZ2VkRGF0YSxcbiAgICB9O1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29sbGVjdGlvbkRhdGEpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VDb2xsZWN0aW9uc0RhdGEoY29udGV4dDogdHlwZXMuSUV4dGVuc2lvbkNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbjogSVczQ29sbGVjdGlvbnNEYXRhKSB7XG4gIGNvbnN0IGFwaSA9IGNvbnRleHQuYXBpO1xuICBjb25zdCBzdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICBjb25zdCBwcm9maWxlSWQgPSBzZWxlY3RvcnMubGFzdEFjdGl2ZVByb2ZpbGVGb3JHYW1lKHN0YXRlLCBnYW1lSWQpO1xuICBjb25zdCBwcm9maWxlID0gc2VsZWN0b3JzLnByb2ZpbGVCeUlkKHN0YXRlLCBwcm9maWxlSWQpO1xuICBpZiAocHJvZmlsZT8uZ2FtZUlkICE9PSBnYW1lSWQpIHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb25bJ2luZm8nXT8uWyduYW1lJ10gIT09IHVuZGVmaW5lZCA/IGNvbGxlY3Rpb25bJ2luZm8nXVsnbmFtZSddIDogJ1dpdGNoZXIgMyBDb2xsZWN0aW9uJztcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IENvbGxlY3Rpb25QYXJzZUVycm9yKGNvbGxlY3Rpb25OYW1lLFxuICAgICAgJ0xhc3QgYWN0aXZlIHByb2ZpbGUgaXMgbWlzc2luZycpKTtcbiAgfVxuICBjb25zdCB7IG1lbnVNb2RTZXR0aW5nc0RhdGEsIHNjcmlwdE1lcmdlZERhdGEgfSA9IGNvbGxlY3Rpb24ubWVyZ2VkRGF0YTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBpbXBvcnRMb2FkT3JkZXIoYXBpLCBjb2xsZWN0aW9uKTtcbiAgICBpZiAobWVudU1vZFNldHRpbmdzRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhd2FpdCBpbXBvcnRNZW51TW9kKGFwaSwgcHJvZmlsZSwgaGV4MkJ1ZmZlcihtZW51TW9kU2V0dGluZ3NEYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKHNjcmlwdE1lcmdlZERhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgdGhlIHNjcmlwdCBtZXJnZXIgaW5zdGFsbGVkIHN0cmFpZ2h0IGF3YXkhXG4gICAgICBjb25zdCBzY3JpcHRNZXJnZXJUb29sID0gc3RhdGU/LnNldHRpbmdzPy5nYW1lTW9kZT8uZGlzY292ZXJlZD8uW0dBTUVfSURdPy50b29scz8uW1NDUklQVF9NRVJHRVJfSURdO1xuICAgICAgaWYgKHNjcmlwdE1lcmdlclRvb2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBkb3dubG9hZFNjcmlwdE1lcmdlcihjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IGltcG9ydFNjcmlwdE1lcmdlcyhjb250ZXh0LCBwcm9maWxlLmlkLCBoZXgyQnVmZmVyKHNjcmlwdE1lcmdlZERhdGEpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG59XG4iXX0=