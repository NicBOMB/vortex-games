"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hex2Buffer = exports.restoreFileData = exports.cleanUpEntries = exports.prepareFileData = exports.walkDirPath = exports.genCollectionLoadOrder = exports.isModInCollection = exports.isValidMod = exports.CollectionParseError = exports.CollectionGenerateError = void 0;
const path_1 = __importDefault(require("path"));
const shortid_1 = require("shortid");
const turbowalk_1 = __importDefault(require("turbowalk"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("../common");
class CollectionGenerateError extends Error {
    constructor(why) {
        super(`Failed to generate game specific data for collection: ${why}`);
        this.name = 'CollectionGenerateError';
    }
}
exports.CollectionGenerateError = CollectionGenerateError;
class CollectionParseError extends Error {
    constructor(collectionName, why) {
        super(`Failed to parse game specific data for collection ${collectionName}: ${why}`);
        this.name = 'CollectionGenerateError';
    }
}
exports.CollectionParseError = CollectionParseError;
function isValidMod(mod) {
    return (mod !== undefined) && (mod.type !== 'collection');
}
exports.isValidMod = isValidMod;
function isModInCollection(collectionMod, mod) {
    if (collectionMod.rules === undefined) {
        return false;
    }
    return collectionMod.rules.find(rule => vortex_api_1.util.testModReference(mod, rule.reference)) !== undefined;
}
exports.isModInCollection = isModInCollection;
function genCollectionLoadOrder(loadOrder, mods, collection) {
    const sortedMods = Object.keys(loadOrder)
        .filter(id => {
        const isLocked = id.toLowerCase().includes(common_1.LOCKED_PREFIX);
        return isLocked || ((collection !== undefined)
            ? isValidMod(mods[id]) && (isModInCollection(collection, mods[id]))
            : isValidMod(mods[id]));
    })
        .sort((lhs, rhs) => loadOrder[lhs].pos - loadOrder[rhs].pos)
        .reduce((accum, iter, idx) => {
        accum[iter] = {
            ...loadOrder[iter],
            pos: idx,
        };
        return accum;
    }, {});
    return sortedMods;
}
exports.genCollectionLoadOrder = genCollectionLoadOrder;
async function walkDirPath(dirPath) {
    let fileEntries = [];
    await (0, turbowalk_1.default)(dirPath, (entries) => {
        fileEntries = fileEntries.concat(entries);
    })
        .catch({ systemCode: 3 }, () => Promise.resolve())
        .catch(err => ['ENOTFOUND', 'ENOENT'].includes(err.code)
        ? Promise.resolve() : Promise.reject(err));
    return fileEntries;
}
exports.walkDirPath = walkDirPath;
async function prepareFileData(dirPath) {
    const sevenZip = new vortex_api_1.util.SevenZip();
    try {
        await vortex_api_1.fs.ensureDirWritableAsync(common_1.W3_TEMP_DATA_DIR);
        const archivePath = path_1.default.join(common_1.W3_TEMP_DATA_DIR, (0, shortid_1.generate)() + '.zip');
        const entries = await vortex_api_1.fs.readdirAsync(dirPath);
        await sevenZip.add(archivePath, entries.map(entry => path_1.default.join(dirPath, entry)), { raw: ['-r'] });
        const data = await vortex_api_1.fs.readFileAsync(archivePath);
        await vortex_api_1.fs.removeAsync(archivePath);
        return data;
    }
    catch (err) {
        return Promise.reject(err);
    }
}
exports.prepareFileData = prepareFileData;
async function cleanUpEntries(fileEntries) {
    try {
        fileEntries.sort((lhs, rhs) => rhs.filePath.length - lhs.filePath.length);
        for (const entry of fileEntries) {
            await vortex_api_1.fs.removeAsync(entry.filePath);
        }
    }
    catch (err) {
        (0, vortex_api_1.log)('error', 'file entry cleanup failed', err);
    }
}
exports.cleanUpEntries = cleanUpEntries;
async function restoreFileData(fileData, destination) {
    const sevenZip = new vortex_api_1.util.SevenZip();
    let archivePath;
    let fileEntries = [];
    try {
        await vortex_api_1.fs.ensureDirWritableAsync(common_1.W3_TEMP_DATA_DIR);
        archivePath = path_1.default.join(common_1.W3_TEMP_DATA_DIR, (0, shortid_1.generate)() + '.zip');
        await vortex_api_1.fs.writeFileAsync(archivePath, fileData);
        const targetDirPath = path_1.default.join(common_1.W3_TEMP_DATA_DIR, path_1.default.basename(archivePath, '.zip'));
        await sevenZip.extractFull(archivePath, targetDirPath);
        fileEntries = await walkDirPath(targetDirPath);
        for (const entry of fileEntries) {
            const relPath = path_1.default.relative(targetDirPath, entry.filePath);
            const dest = path_1.default.join(destination, relPath);
            await vortex_api_1.fs.ensureDirWritableAsync(path_1.default.dirname(dest));
            await vortex_api_1.fs.copyAsync(entry.filePath, dest);
        }
        cleanUpEntries(fileEntries);
        return Promise.resolve();
    }
    catch (err) {
        cleanUpEntries(fileEntries);
        return Promise.reject(err);
    }
}
exports.restoreFileData = restoreFileData;
function hex2Buffer(hexData) {
    const byteArray = new Uint8Array(hexData.length / 2);
    for (let x = 0; x < byteArray.length; x++) {
        byteArray[x] = parseInt(hexData.substr(x * 2, 2), 16);
    }
    const buffer = Buffer.from(byteArray);
    return buffer;
}
exports.hex2Buffer = hex2Buffer;
//# sourceMappingURL=data:application/json;base64,